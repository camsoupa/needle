<javax.crypto.Cipher: Cipher(javax.crypto.CipherSpi,java.security.Provider,java.lang.String)> _SINK_
<javax.crypto.Cipher: Cipher(javax.crypto.CipherSpi,java.lang.String)> _SINK_
<javax.crypto.Cipher: Cipher(javax.crypto.CipherSpi,java.security.Provider.Service,java.util.Iterator,java.lang.String,java.util.List)> _SINK_
<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)> _SINK_
<javax.crypto.Cipher: java.lang.String[] tokenizeTransformation(java.lang.String)> _SOURCE_
<javax.crypto.Transform: Transform(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> _SINK_
<javax.crypto.Transform: void setModePadding(javax.crypto.CipherSpi)> _SINK_
<javax.crypto.Transform: int supportsModePadding(java.security.Provider.Service)> _SINK_
<javax.crypto.Transform: int supportsModePadding(java.security.Provider.Service)> _SOURCE_
<javax.crypto.Transform: int supportsMode(java.security.Provider.Service)> _SINK_
<javax.crypto.Transform: int supportsMode(java.security.Provider.Service)> _SOURCE_
<javax.crypto.Transform: int supportsPadding(java.security.Provider.Service)> _SINK_
<javax.crypto.Transform: int supportsPadding(java.security.Provider.Service)> _SOURCE_
<javax.crypto.Transform: int supports(java.security.Provider.Service,java.lang.String,java.lang.String)> _SINK_
<javax.crypto.Transform: int supports(java.security.Provider.Service,java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.Transform: boolean matches(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.Transform: boolean matches(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)> _SINK_
<javax.crypto.Cipher: java.util.List getTransforms(java.lang.String)> _SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher.Transform getTransform(java.security.Provider.Service,java.util.List)> _SINK_
<javax.crypto.Cipher: javax.crypto.Cipher.Transform getTransform(java.security.Provider.Service,java.util.List)> _SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)> _SINK_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)> _SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.Cipher: void implInit(javax.crypto.CipherSpi,int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)> _SINK_
<javax.crypto.Cipher: void chooseProvider(int,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.AlgorithmParameters,java.security.SecureRandom)> _SINK_
<javax.crypto.Cipher: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.Cipher: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.Cipher: int getBlockSize()> _SOURCE_
<javax.crypto.Cipher: int getOutputSize(int)> _SINK_
<javax.crypto.Cipher: int getOutputSize(int)> _SOURCE_
<javax.crypto.Cipher: byte[] getIV()> _SOURCE_
<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()> _SOURCE_
<javax.crypto.Cipher: javax.crypto.ExemptionMechanism getExemptionMechanism()> _SOURCE_
<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key)> _SINK_
<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.Cipher: void checkCryptoPerm(javax.crypto.CipherSpi,java.security.Key,java.security.AlgorithmParameters)> _SINK_
<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.Cipher: boolean passCryptoPermCheck(javax.crypto.CipherSpi,java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SOURCE_
<javax.crypto.Cipher: void checkOpmode(int)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.Key)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.SecureRandom)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.cert.Certificate)> _SINK_
<javax.crypto.Cipher: void init(int,java.security.cert.Certificate,java.security.SecureRandom)> _SINK_
<javax.crypto.Cipher: byte[] update(byte[])> _SINK_
<javax.crypto.Cipher: byte[] update(byte[])> _SOURCE_
<javax.crypto.Cipher: byte[] update(byte[],int,int)> _SINK_
<javax.crypto.Cipher: byte[] update(byte[],int,int)> _SOURCE_
<javax.crypto.Cipher: int update(byte[],int,int,byte[])> _SINK_
<javax.crypto.Cipher: int update(byte[],int,int,byte[])> _SOURCE_
<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)> _SINK_
<javax.crypto.Cipher: int update(byte[],int,int,byte[],int)> _SOURCE_
<javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SINK_
<javax.crypto.Cipher: int update(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SOURCE_
<javax.crypto.Cipher: byte[] doFinal()> _SOURCE_
<javax.crypto.Cipher: int doFinal(byte[],int)> _SINK_
<javax.crypto.Cipher: int doFinal(byte[],int)> _SOURCE_
<javax.crypto.Cipher: byte[] doFinal(byte[])> _SINK_
<javax.crypto.Cipher: byte[] doFinal(byte[])> _SOURCE_
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)> _SINK_
<javax.crypto.Cipher: byte[] doFinal(byte[],int,int)> _SOURCE_
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[])> _SINK_
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[])> _SOURCE_
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)> _SINK_
<javax.crypto.Cipher: int doFinal(byte[],int,int,byte[],int)> _SOURCE_
<javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SINK_
<javax.crypto.Cipher: int doFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SOURCE_
<javax.crypto.Cipher: byte[] wrap(java.security.Key)> _SINK_
<javax.crypto.Cipher: byte[] wrap(java.security.Key)> _SOURCE_
<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)> _SINK_
<javax.crypto.Cipher: java.security.Key unwrap(byte[],java.lang.String,int)> _SOURCE_
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec(java.security.AlgorithmParameters)> _SINK_
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec(java.security.AlgorithmParameters)> _SOURCE_
<javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)> _SINK_
<javax.crypto.Cipher: javax.crypto.CryptoPermission getConfiguredPermission(java.lang.String)> _SOURCE_
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)> _SINK_
<javax.crypto.Cipher: int getMaxAllowedKeyLength(java.lang.String)> _SOURCE_
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)> _SINK_
<javax.crypto.Cipher: java.security.spec.AlgorithmParameterSpec getMaxAllowedParameterSpec(java.lang.String)> _SOURCE_
<javax.crypto.Cipher: void updateAAD(byte[])> _SINK_
<javax.crypto.Cipher: void updateAAD(byte[],int,int)> _SINK_
<javax.crypto.Cipher: void updateAAD(java.nio.ByteBuffer)> _SINK_
<javax.crypto.KeyGenerator: KeyGenerator(javax.crypto.KeyGeneratorSpi,java.security.Provider,java.lang.String)> _SINK_
<javax.crypto.KeyGenerator: KeyGenerator(java.lang.String)> _SINK_
<javax.crypto.KeyGenerator: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)> _SINK_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.KeyGenerator: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.KeyGenerator: javax.crypto.KeyGeneratorSpi nextSpi(javax.crypto.KeyGeneratorSpi,boolean)> _SINK_
<javax.crypto.KeyGenerator: javax.crypto.KeyGeneratorSpi nextSpi(javax.crypto.KeyGeneratorSpi,boolean)> _SOURCE_
<javax.crypto.KeyGenerator: void init(java.security.SecureRandom)> _SINK_
<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.KeyGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyGenerator: void init(int)> _SINK_
<javax.crypto.KeyGenerator: void init(int,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()> _SOURCE_
<javax.crypto.ExemptionMechanismException: ExemptionMechanismException(java.lang.String)> _SINK_
<javax.crypto.Mac: Mac(javax.crypto.MacSpi,java.security.Provider,java.lang.String)> _SINK_
<javax.crypto.Mac: Mac(java.security.Provider.Service,java.util.Iterator,java.lang.String)> _SINK_
<javax.crypto.Mac: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)> _SINK_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String)> _SOURCE_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.Mac: javax.crypto.Mac getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.Mac: void chooseProvider(java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.Mac: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.Mac: int getMacLength()> _SOURCE_
<javax.crypto.Mac: void init(java.security.Key)> _SINK_
<javax.crypto.Mac: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.Mac: void update(byte)> _SINK_
<javax.crypto.Mac: void update(byte[])> _SINK_
<javax.crypto.Mac: void update(byte[],int,int)> _SINK_
<javax.crypto.Mac: void update(java.nio.ByteBuffer)> _SINK_
<javax.crypto.Mac: byte[] doFinal()> _SOURCE_
<javax.crypto.Mac: void doFinal(byte[],int)> _SINK_
<javax.crypto.Mac: byte[] doFinal(byte[])> _SINK_
<javax.crypto.Mac: byte[] doFinal(byte[])> _SOURCE_
<javax.crypto.Mac: java.lang.Object clone()> _SOURCE_
<javax.crypto.MacSpi: int engineGetMacLength()> _SOURCE_
<javax.crypto.MacSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.MacSpi: void engineUpdate(byte)> _SINK_
<javax.crypto.MacSpi: void engineUpdate(byte[],int,int)> _SINK_
<javax.crypto.MacSpi: void engineUpdate(java.nio.ByteBuffer)> _SINK_
<javax.crypto.MacSpi: byte[] engineDoFinal()> _SOURCE_
<javax.crypto.MacSpi: java.lang.Object clone()> _SOURCE_
<javax.crypto.NoSuchPaddingException: NoSuchPaddingException(java.lang.String)> _SINK_
<javax.crypto.SecretKeyFactory: SecretKeyFactory(javax.crypto.SecretKeyFactorySpi,java.security.Provider,java.lang.String)> _SINK_
<javax.crypto.SecretKeyFactory: SecretKeyFactory(java.lang.String)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.SecretKeyFactory: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.SecretKeyFactory: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactorySpi nextSpi(javax.crypto.SecretKeyFactorySpi)> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)> _SOURCE_
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)> _SINK_
<javax.crypto.SecretKeyFactory: java.security.spec.KeySpec getKeySpec(javax.crypto.SecretKey,java.lang.Class)> _SOURCE_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey translateKey(javax.crypto.SecretKey)> _SINK_
<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey translateKey(javax.crypto.SecretKey)> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo(byte[])> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo(java.lang.String,byte[])> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo(java.security.AlgorithmParameters,byte[])> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: java.lang.String getAlgName()> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.AlgorithmParameters getAlgParameters()> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncryptedData()> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(javax.crypto.Cipher)> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpecImpl(java.security.Key,java.security.Provider)> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpecImpl(java.security.Key,java.security.Provider)> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key)> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key)> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.lang.String)> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.lang.String)> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.security.Provider)> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: java.security.spec.PKCS8EncodedKeySpec getKeySpec(java.security.Key,java.security.Provider)> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: byte[] getEncoded()> _SOURCE_
<javax.crypto.EncryptedPrivateKeyInfo: void checkTag(sun.security.util.DerValue,byte,java.lang.String)> _SINK_
<javax.crypto.EncryptedPrivateKeyInfo: void checkPKCS8Encoding(byte[])> _SINK_
<javax.crypto.ExemptionMechanism: ExemptionMechanism(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)> _SINK_
<javax.crypto.ExemptionMechanism: java.lang.String getName()> _SOURCE_
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)> _SINK_
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String)> _SOURCE_
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.ExemptionMechanism: javax.crypto.ExemptionMechanism getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.ExemptionMechanism: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)> _SINK_
<javax.crypto.ExemptionMechanism: boolean isCryptoAllowed(java.security.Key)> _SOURCE_
<javax.crypto.ExemptionMechanism: int getOutputSize(int)> _SINK_
<javax.crypto.ExemptionMechanism: int getOutputSize(int)> _SOURCE_
<javax.crypto.ExemptionMechanism: void init(java.security.Key)> _SINK_
<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.ExemptionMechanism: void init(java.security.Key,java.security.AlgorithmParameters)> _SINK_
<javax.crypto.ExemptionMechanism: byte[] genExemptionBlob()> _SOURCE_
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])> _SINK_
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[])> _SOURCE_
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[],int)> _SINK_
<javax.crypto.ExemptionMechanism: int genExemptionBlob(byte[],int)> _SOURCE_
<javax.crypto.CipherOutputStream: CipherOutputStream(java.io.OutputStream,javax.crypto.Cipher)> _SINK_
<javax.crypto.CipherOutputStream: CipherOutputStream(java.io.OutputStream)> _SINK_
<javax.crypto.CipherOutputStream: void write(int)> _SINK_
<javax.crypto.CipherOutputStream: void write(byte)> _SINK_
<javax.crypto.CipherOutputStream: void write(byte,int,int)> _SINK_
<javax.crypto.Implementation: Implementation(java.lang.Object,java.security.Provider)> _SINK_
<javax.crypto.Implementation: java.lang.Object getEngine()> _SOURCE_
<javax.crypto.Implementation: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.JCEUtil: javax.crypto.JCEUtil.Implementation getImplementationFromProvider(java.lang.String,java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.JCEUtil: javax.crypto.JCEUtil.Implementation getImplementationFromProvider(java.lang.String,java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.JCEUtil: javax.crypto.JCEUtil.Implementation getImplementation(java.lang.String,java.lang.String,java.lang.String)> _SINK_
<javax.crypto.JCEUtil: javax.crypto.JCEUtil.Implementation getImplementation(java.lang.String,java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)> _SINK_
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getCryptoPermission(java.lang.String)> _SOURCE_
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermissions getAppPermissions(java.net.URL)> _SINK_
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermissions getAppPermissions(java.net.URL)> _SOURCE_
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getDefaultPermission(java.lang.String)> _SINK_
<javax.crypto.JceSecurityManager: javax.crypto.CryptoPermission getDefaultPermission(java.lang.String)> _SOURCE_
<javax.crypto.JceSecurityManager: boolean isCallerTrusted()> _SOURCE_
<javax.crypto.ShortBufferException: ShortBufferException(java.lang.String)> _SINK_
<javax.crypto.NullCipherSpi: void engineSetMode(java.lang.String)> _SINK_
<javax.crypto.NullCipherSpi: void engineSetPadding(java.lang.String)> _SINK_
<javax.crypto.NullCipherSpi: int engineGetBlockSize()> _SOURCE_
<javax.crypto.NullCipherSpi: int engineGetOutputSize(int)> _SINK_
<javax.crypto.NullCipherSpi: int engineGetOutputSize(int)> _SOURCE_
<javax.crypto.NullCipherSpi: byte[] engineGetIV()> _SOURCE_
<javax.crypto.NullCipherSpi: java.security.AlgorithmParameters engineGetParameters()> _SOURCE_
<javax.crypto.NullCipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)> _SINK_
<javax.crypto.NullCipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.NullCipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)> _SINK_
<javax.crypto.NullCipherSpi: byte[] engineUpdate(byte[],int,int)> _SINK_
<javax.crypto.NullCipherSpi: byte[] engineUpdate(byte[],int,int)> _SOURCE_
<javax.crypto.NullCipherSpi: int engineUpdate(byte[],int,int,byte[],int)> _SINK_
<javax.crypto.NullCipherSpi: int engineUpdate(byte[],int,int,byte[],int)> _SOURCE_
<javax.crypto.NullCipherSpi: byte[] engineDoFinal(byte[],int,int)> _SINK_
<javax.crypto.NullCipherSpi: byte[] engineDoFinal(byte[],int,int)> _SOURCE_
<javax.crypto.NullCipherSpi: int engineDoFinal(byte[],int,int,byte[],int)> _SINK_
<javax.crypto.NullCipherSpi: int engineDoFinal(byte[],int,int,byte[],int)> _SOURCE_
<javax.crypto.NullCipherSpi: int engineGetKeySize(java.security.Key)> _SINK_
<javax.crypto.NullCipherSpi: int engineGetKeySize(java.security.Key)> _SOURCE_
<javax.crypto.CryptoAllPermission: boolean implies(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoAllPermission: boolean implies(java.security.acl.Permission)> _SOURCE_
<javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)> _SINK_
<javax.crypto.CryptoAllPermission: boolean equals(java.lang.Object)> _SOURCE_
<javax.crypto.CryptoAllPermission: int hashCode()> _SOURCE_
<javax.crypto.CryptoAllPermission: java.security.PermissionCollection newPermissionCollection()> _SOURCE_
<javax.crypto.CryptoAllPermissionCollection: void add(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoAllPermissionCollection: boolean implies(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoAllPermissionCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<javax.crypto.CryptoAllPermissionCollection: java.util.Enumeration elements()> _SOURCE_
<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)> _SINK_
<javax.crypto.ExemptionMechanismSpi: int engineGetOutputSize(int)> _SOURCE_
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key)> _SINK_
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.ExemptionMechanismSpi: void engineInit(java.security.Key,java.security.AlgorithmParameters)> _SINK_
<javax.crypto.ExemptionMechanismSpi: byte[] engineGenExemptionBlob()> _SOURCE_
<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)> _SINK_
<javax.crypto.ExemptionMechanismSpi: int engineGenExemptionBlob(byte[],int)> _SOURCE_
<javax.crypto.AEADBadTagException: AEADBadTagException(java.lang.String)> _SINK_
<javax.crypto.spec.DHGenParameterSpec: DHGenParameterSpec(int,int)> _SINK_
<javax.crypto.spec.DHGenParameterSpec: int getPrimeSize()> _SOURCE_
<javax.crypto.spec.DHGenParameterSpec: int getExponentSize()> _SOURCE_
<javax.crypto.spec.DESedeKeySpec: DESedeKeySpec(byte[])> _SINK_
<javax.crypto.spec.DESedeKeySpec: DESedeKeySpec(byte[],int)> _SINK_
<javax.crypto.spec.DESedeKeySpec: byte[] getKey()> _SOURCE_
<javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[],int)> _SINK_
<javax.crypto.spec.DESedeKeySpec: boolean isParityAdjusted(byte[],int)> _SOURCE_
<javax.crypto.spec.GCMParameterSpec: GCMParameterSpec(int,byte[])> _SINK_
<javax.crypto.spec.GCMParameterSpec: GCMParameterSpec(int,byte[],int,int)> _SINK_
<javax.crypto.spec.GCMParameterSpec: void init(int,byte[],int,int)> _SINK_
<javax.crypto.spec.GCMParameterSpec: int getTLen()> _SOURCE_
<javax.crypto.spec.GCMParameterSpec: byte[] getIV()> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: PBEParameterSpec(byte[],int)> _SINK_
<javax.crypto.spec.PBEParameterSpec: byte[] getSalt()> _SOURCE_
<javax.crypto.spec.PBEParameterSpec: int getIterationCount()> _SOURCE_
<javax.crypto.spec.DHParameterSpec: DHParameterSpec(java.math.BigInteger,java.math.BigInteger)> _SINK_
<javax.crypto.spec.DHParameterSpec: DHParameterSpec(java.math.BigInteger,java.math.BigInteger,int)> _SINK_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getP()> _SOURCE_
<javax.crypto.spec.DHParameterSpec: java.math.BigInteger getG()> _SOURCE_
<javax.crypto.spec.DHParameterSpec: int getL()> _SOURCE_
<javax.crypto.spec.PSource: PSource(java.lang.String)> _SINK_
<javax.crypto.spec.PSource: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.spec.PSpecified: PSpecified(byte[])> _SINK_
<javax.crypto.spec.PSpecified: byte[] getValue()> _SOURCE_
<javax.crypto.spec.IvParameterSpec: IvParameterSpec(byte[])> _SINK_
<javax.crypto.spec.IvParameterSpec: IvParameterSpec(byte[],int,int)> _SINK_
<javax.crypto.spec.IvParameterSpec: byte[] getIV()> _SOURCE_
<javax.crypto.spec.DHPrivateKeySpec: DHPrivateKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getX()> _SOURCE_
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getP()> _SOURCE_
<javax.crypto.spec.DHPrivateKeySpec: java.math.BigInteger getG()> _SOURCE_
<javax.crypto.spec.DESKeySpec: DESKeySpec(byte[])> _SINK_
<javax.crypto.spec.DESKeySpec: DESKeySpec(byte[],int)> _SINK_
<javax.crypto.spec.DESKeySpec: byte[] getKey()> _SOURCE_
<javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)> _SINK_
<javax.crypto.spec.DESKeySpec: boolean isParityAdjusted(byte[],int)> _SOURCE_
<javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)> _SINK_
<javax.crypto.spec.DESKeySpec: boolean isWeak(byte[],int)> _SOURCE_
<javax.crypto.spec.PBEKeySpec: PBEKeySpec(char[])> _SINK_
<javax.crypto.spec.PBEKeySpec: PBEKeySpec(char[],byte[],int,int)> _SINK_
<javax.crypto.spec.PBEKeySpec: PBEKeySpec(char[],byte[],int)> _SINK_
<javax.crypto.spec.PBEKeySpec: char[] getPassword()> _SOURCE_
<javax.crypto.spec.PBEKeySpec: byte[] getSalt()> _SOURCE_
<javax.crypto.spec.PBEKeySpec: int getIterationCount()> _SOURCE_
<javax.crypto.spec.PBEKeySpec: int getKeyLength()> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: RC2ParameterSpec(int)> _SINK_
<javax.crypto.spec.RC2ParameterSpec: RC2ParameterSpec(int,byte[])> _SINK_
<javax.crypto.spec.RC2ParameterSpec: RC2ParameterSpec(int,byte[],int)> _SINK_
<javax.crypto.spec.RC2ParameterSpec: int getEffectiveKeyBits()> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: byte[] getIV()> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: boolean equals(java.lang.Object)> _SINK_
<javax.crypto.spec.RC2ParameterSpec: boolean equals(java.lang.Object)> _SOURCE_
<javax.crypto.spec.RC2ParameterSpec: int hashCode()> _SOURCE_
<javax.crypto.spec.SecretKeySpec: SecretKeySpec(byte[],java.lang.String)> _SINK_
<javax.crypto.spec.SecretKeySpec: SecretKeySpec(byte[],int,int,java.lang.String)> _SINK_
<javax.crypto.spec.SecretKeySpec: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.spec.SecretKeySpec: java.lang.String getFormat()> _SOURCE_
<javax.crypto.spec.SecretKeySpec: byte[] getEncoded()> _SOURCE_
<javax.crypto.spec.SecretKeySpec: int hashCode()> _SOURCE_
<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)> _SINK_
<javax.crypto.spec.SecretKeySpec: boolean equals(java.lang.Object)> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: OAEPParameterSpec(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,javax.crypto.spec.PSource)> _SINK_
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getDigestAlgorithm()> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.lang.String getMGFAlgorithm()> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()> _SOURCE_
<javax.crypto.spec.OAEPParameterSpec: javax.crypto.spec.PSource getPSource()> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: DHPublicKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getY()> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getP()> _SOURCE_
<javax.crypto.spec.DHPublicKeySpec: java.math.BigInteger getG()> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: RC5ParameterSpec(int,int,int)> _SINK_
<javax.crypto.spec.RC5ParameterSpec: RC5ParameterSpec(int,int,int,byte[])> _SINK_
<javax.crypto.spec.RC5ParameterSpec: RC5ParameterSpec(int,int,int,byte[],int)> _SINK_
<javax.crypto.spec.RC5ParameterSpec: int getVersion()> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getRounds()> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int getWordSize()> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: byte[] getIV()> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: boolean equals(java.lang.Object)> _SINK_
<javax.crypto.spec.RC5ParameterSpec: boolean equals(java.lang.Object)> _SOURCE_
<javax.crypto.spec.RC5ParameterSpec: int hashCode()> _SOURCE_
<javax.crypto.JarVerifier: JarVerifier(java.net.URL,boolean)> _SINK_
<javax.crypto.JarVerifier: void verifyPolicySigned(java.security.cert.Certificate[])> _SINK_
<javax.crypto.JarVerifier: javax.crypto.CryptoPermissions getPermissions()> _SOURCE_
<javax.crypto.interfaces.DHPublicKey: java.math.BigInteger getY()> _SOURCE_
<javax.crypto.interfaces.DHPrivateKey: java.math.BigInteger getX()> _SOURCE_
<javax.crypto.interfaces.DHKey: javax.crypto.spec.DHParameterSpec getParams()> _SOURCE_
<javax.crypto.interfaces.PBEKey: char[] getPassword()> _SOURCE_
<javax.crypto.interfaces.PBEKey: byte[] getSalt()> _SOURCE_
<javax.crypto.interfaces.PBEKey: int getIterationCount()> _SOURCE_
<javax.crypto.SealedObject: SealedObject(java.io.Serializable,javax.crypto.Cipher)> _SINK_
<javax.crypto.SealedObject: SealedObject(javax.crypto.SealedObject)> _SINK_
<javax.crypto.SealedObject: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key)> _SINK_
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key)> _SOURCE_
<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)> _SINK_
<javax.crypto.SealedObject: java.lang.Object getObject(javax.crypto.Cipher)> _SOURCE_
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key,java.lang.String)> _SINK_
<javax.crypto.SealedObject: java.lang.Object getObject(java.security.Key,java.lang.String)> _SOURCE_
<javax.crypto.SealedObject: java.lang.Object unseal(java.security.Key,java.lang.String)> _SINK_
<javax.crypto.SealedObject: java.lang.Object unseal(java.security.Key,java.lang.String)> _SOURCE_
<javax.crypto.SealedObject: void readObject(java.io.ObjectInputStream)> _SINK_
<javax.crypto.extObjectInputStream: extObjectInputStream(java.io.InputStream)> _SINK_
<javax.crypto.extObjectInputStream: java.lang.Class resolveClass(unknown.package.ObjectStreamClass)> _SINK_
<javax.crypto.extObjectInputStream: java.lang.Class resolveClass(unknown.package.ObjectStreamClass)> _SOURCE_
<javax.crypto.CryptoPermission: CryptoPermission(java.lang.String)> _SINK_
<javax.crypto.CryptoPermission: CryptoPermission(java.lang.String,int)> _SINK_
<javax.crypto.CryptoPermission: CryptoPermission(java.lang.String,int,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.CryptoPermission: CryptoPermission(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.CryptoPermission: CryptoPermission(java.lang.String,int,java.lang.String)> _SINK_
<javax.crypto.CryptoPermission: CryptoPermission(java.lang.String,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)> _SINK_
<javax.crypto.CryptoPermission: boolean implies(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoPermission: boolean implies(java.security.acl.Permission)> _SOURCE_
<javax.crypto.CryptoPermission: boolean equals(java.lang.Object)> _SINK_
<javax.crypto.CryptoPermission: boolean equals(java.lang.Object)> _SOURCE_
<javax.crypto.CryptoPermission: int hashCode()> _SOURCE_
<javax.crypto.CryptoPermission: java.lang.String getActions()> _SOURCE_
<javax.crypto.CryptoPermission: java.security.PermissionCollection newPermissionCollection()> _SOURCE_
<javax.crypto.CryptoPermission: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.CryptoPermission: java.lang.String getExemptionMechanism()> _SOURCE_
<javax.crypto.CryptoPermission: int getMaxKeySize()> _SOURCE_
<javax.crypto.CryptoPermission: boolean getCheckParam()> _SOURCE_
<javax.crypto.CryptoPermission: java.security.spec.AlgorithmParameterSpec getAlgorithmParameterSpec()> _SOURCE_
<javax.crypto.CryptoPermission: java.lang.String toString()> _SOURCE_
<javax.crypto.CryptoPermission: boolean impliesExemptionMechanism(java.lang.String)> _SINK_
<javax.crypto.CryptoPermission: boolean impliesExemptionMechanism(java.lang.String)> _SOURCE_
<javax.crypto.CryptoPermission: boolean impliesParameterSpec(boolean,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.CryptoPermission: boolean impliesParameterSpec(boolean,java.security.spec.AlgorithmParameterSpec)> _SOURCE_
<javax.crypto.CryptoPermission: boolean equalObjects(java.lang.Object,java.lang.Object)> _SINK_
<javax.crypto.CryptoPermission: boolean equalObjects(java.lang.Object,java.lang.Object)> _SOURCE_
<javax.crypto.CryptoPermissionCollection: void add(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoPermissionCollection: boolean implies(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoPermissionCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<javax.crypto.CryptoPermissionCollection: java.util.Enumeration elements()> _SOURCE_
<javax.crypto.BadPaddingException: BadPaddingException(java.lang.String)> _SINK_
<javax.crypto.JceSecurity: sun.security.jca.GetInstance.Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)> _SINK_
<javax.crypto.JceSecurity: sun.security.jca.GetInstance.Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.JceSecurity: sun.security.jca.GetInstance.Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.JceSecurity: sun.security.jca.GetInstance.Instance getInstance(java.lang.String,java.lang.Class,java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.JceSecurity: sun.security.jca.GetInstance.Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)> _SINK_
<javax.crypto.JceSecurity: sun.security.jca.GetInstance.Instance getInstance(java.lang.String,java.lang.Class,java.lang.String)> _SOURCE_
<javax.crypto.JceSecurity: javax.crypto.CryptoPermissions verifyExemptJar(java.net.URL)> _SINK_
<javax.crypto.JceSecurity: javax.crypto.CryptoPermissions verifyExemptJar(java.net.URL)> _SOURCE_
<javax.crypto.JceSecurity: void verifyProviderJar(java.net.URL)> _SINK_
<javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)> _SINK_
<javax.crypto.JceSecurity: java.lang.Exception getVerificationResult(java.security.Provider)> _SOURCE_
<javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)> _SINK_
<javax.crypto.JceSecurity: boolean canUseProvider(java.security.Provider)> _SOURCE_
<javax.crypto.JceSecurity: java.net.URL getCodeBase(java.lang.Class)> _SINK_
<javax.crypto.JceSecurity: java.net.URL getCodeBase(java.lang.Class)> _SOURCE_
<javax.crypto.JceSecurity: void loadPolicies(java.io.File,javax.crypto.CryptoPermissions,javax.crypto.CryptoPermissions)> _SINK_
<javax.crypto.JceSecurity: javax.crypto.CryptoPermissions getDefaultPolicy()> _SOURCE_
<javax.crypto.JceSecurity: javax.crypto.CryptoPermissions getExemptPolicy()> _SOURCE_
<javax.crypto.JceSecurity: boolean isRestricted()> _SOURCE_
<javax.crypto.IllegalBlockSizeException: IllegalBlockSizeException(java.lang.String)> _SINK_
<javax.crypto.CipherSpi: void engineSetMode(java.lang.String)> _SINK_
<javax.crypto.CipherSpi: void engineSetPadding(java.lang.String)> _SINK_
<javax.crypto.CipherSpi: int engineGetBlockSize()> _SOURCE_
<javax.crypto.CipherSpi: int engineGetOutputSize(int)> _SINK_
<javax.crypto.CipherSpi: int engineGetOutputSize(int)> _SOURCE_
<javax.crypto.CipherSpi: byte[] engineGetIV()> _SOURCE_
<javax.crypto.CipherSpi: java.security.AlgorithmParameters engineGetParameters()> _SOURCE_
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.SecureRandom)> _SINK_
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.CipherSpi: void engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)> _SINK_
<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)> _SINK_
<javax.crypto.CipherSpi: byte[] engineUpdate(byte[],int,int)> _SOURCE_
<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)> _SINK_
<javax.crypto.CipherSpi: int engineUpdate(byte[],int,int,byte[],int)> _SOURCE_
<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SINK_
<javax.crypto.CipherSpi: int engineUpdate(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SOURCE_
<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)> _SINK_
<javax.crypto.CipherSpi: byte[] engineDoFinal(byte[],int,int)> _SOURCE_
<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)> _SINK_
<javax.crypto.CipherSpi: int engineDoFinal(byte[],int,int,byte[],int)> _SOURCE_
<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SINK_
<javax.crypto.CipherSpi: int engineDoFinal(java.nio.ByteBuffer,java.nio.ByteBuffer)> _SOURCE_
<javax.crypto.CipherSpi: int getTempArraySize(int)> _SINK_
<javax.crypto.CipherSpi: int getTempArraySize(int)> _SOURCE_
<javax.crypto.CipherSpi: int bufferCrypt(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)> _SINK_
<javax.crypto.CipherSpi: int bufferCrypt(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)> _SOURCE_
<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)> _SINK_
<javax.crypto.CipherSpi: byte[] engineWrap(java.security.Key)> _SOURCE_
<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)> _SINK_
<javax.crypto.CipherSpi: java.security.Key engineUnwrap(byte[],java.lang.String,int)> _SOURCE_
<javax.crypto.CipherSpi: int engineGetKeySize(java.security.Key)> _SINK_
<javax.crypto.CipherSpi: int engineGetKeySize(java.security.Key)> _SOURCE_
<javax.crypto.CipherSpi: void engineUpdateAAD(byte[],int,int)> _SINK_
<javax.crypto.CipherSpi: void engineUpdateAAD(java.nio.ByteBuffer)> _SINK_
<javax.crypto.KeyAgreement: KeyAgreement(javax.crypto.KeyAgreementSpi,java.security.Provider,java.lang.String)> _SINK_
<javax.crypto.KeyAgreement: KeyAgreement(java.security.Provider.Service,java.util.Iterator,java.lang.String)> _SINK_
<javax.crypto.KeyAgreement: java.lang.String getAlgorithm()> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)> _SINK_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String)> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.lang.String)> _SINK_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.lang.String)> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)> _SINK_
<javax.crypto.KeyAgreement: javax.crypto.KeyAgreement getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<javax.crypto.KeyAgreement: void implInit(javax.crypto.KeyAgreementSpi,int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyAgreement: void chooseProvider(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyAgreement: java.security.Provider getProvider()> _SOURCE_
<javax.crypto.KeyAgreement: void init(java.security.Key)> _SINK_
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec)> _SINK_
<javax.crypto.KeyAgreement: void init(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)> _SINK_
<javax.crypto.KeyAgreement: java.security.Key doPhase(java.security.Key,boolean)> _SOURCE_
<javax.crypto.KeyAgreement: byte[] generateSecret()> _SOURCE_
<javax.crypto.KeyAgreement: int generateSecret(byte[],int)> _SINK_
<javax.crypto.KeyAgreement: int generateSecret(byte[],int)> _SOURCE_
<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)> _SINK_
<javax.crypto.KeyAgreement: javax.crypto.SecretKey generateSecret(java.lang.String)> _SOURCE_
<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyAgreementSpi: void engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyAgreementSpi: java.security.Key engineDoPhase(java.security.Key,boolean)> _SINK_
<javax.crypto.KeyAgreementSpi: java.security.Key engineDoPhase(java.security.Key,boolean)> _SOURCE_
<javax.crypto.KeyAgreementSpi: byte[] engineGenerateSecret()> _SOURCE_
<javax.crypto.KeyAgreementSpi: int engineGenerateSecret(byte[],int)> _SINK_
<javax.crypto.KeyAgreementSpi: int engineGenerateSecret(byte[],int)> _SOURCE_
<javax.crypto.KeyAgreementSpi: javax.crypto.SecretKey engineGenerateSecret(java.lang.String)> _SINK_
<javax.crypto.KeyAgreementSpi: javax.crypto.SecretKey engineGenerateSecret(java.lang.String)> _SOURCE_
<javax.crypto.CryptoPermissions: void load(java.io.InputStream)> _SINK_
<javax.crypto.CryptoPermissions: boolean isEmpty()> _SOURCE_
<javax.crypto.CryptoPermissions: void add(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoPermissions: boolean implies(java.security.acl.Permission)> _SINK_
<javax.crypto.CryptoPermissions: boolean implies(java.security.acl.Permission)> _SOURCE_
<javax.crypto.CryptoPermissions: java.util.Enumeration elements()> _SOURCE_
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)> _SINK_
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermissions getMinimum(javax.crypto.CryptoPermissions)> _SOURCE_
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(java.security.PermissionCollection,java.security.PermissionCollection)> _SINK_
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(java.security.PermissionCollection,java.security.PermissionCollection)> _SOURCE_
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(int,java.security.PermissionCollection)> _SINK_
<javax.crypto.CryptoPermissions: javax.crypto.CryptoPermission[] getMinimum(int,java.security.PermissionCollection)> _SOURCE_
<javax.crypto.CryptoPermissions: java.security.PermissionCollection getPermissionCollection(java.lang.String)> _SINK_
<javax.crypto.CryptoPermissions: java.security.PermissionCollection getPermissionCollection(java.lang.String)> _SOURCE_
<javax.crypto.CryptoPermissions: java.security.PermissionCollection getPermissionCollection(javax.crypto.CryptoPermission)> _SINK_
<javax.crypto.CryptoPermissions: java.security.PermissionCollection getPermissionCollection(javax.crypto.CryptoPermission)> _SOURCE_
<javax.crypto.PermissionsEnumerator: PermissionsEnumerator(java.util.Enumeration)> _SINK_
<javax.crypto.PermissionsEnumerator: boolean hasMoreElements()> _SOURCE_
<javax.crypto.PermissionsEnumerator: java.lang.Object nextElement()> _SOURCE_
<javax.crypto.PermissionsEnumerator: java.util.Enumeration getNextEnumWithMore()> _SOURCE_
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)> _SINK_
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineGenerateSecret(java.security.spec.KeySpec)> _SOURCE_
<javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)> _SINK_
<javax.crypto.SecretKeyFactorySpi: java.security.spec.KeySpec engineGetKeySpec(javax.crypto.SecretKey,java.lang.Class)> _SOURCE_
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)> _SINK_
<javax.crypto.SecretKeyFactorySpi: javax.crypto.SecretKey engineTranslateKey(javax.crypto.SecretKey)> _SOURCE_
<javax.crypto.CipherInputStream: int getMoreData()> _SOURCE_
<javax.crypto.CipherInputStream: CipherInputStream(java.io.InputStream,javax.crypto.Cipher)> _SINK_
<javax.crypto.CipherInputStream: CipherInputStream(java.io.InputStream)> _SINK_
<javax.crypto.CipherInputStream: int read()> _SOURCE_
<javax.crypto.CipherInputStream: int read(byte)> _SINK_
<javax.crypto.CipherInputStream: int read(byte)> _SOURCE_
<javax.crypto.CipherInputStream: int read(byte,int,int)> _SINK_
<javax.crypto.CipherInputStream: int read(byte,int,int)> _SOURCE_
<javax.crypto.CipherInputStream: long skip(long)> _SINK_
<javax.crypto.CipherInputStream: long skip(long)> _SOURCE_
<javax.crypto.CipherInputStream: int available()> _SOURCE_
<javax.crypto.CipherInputStream: boolean markSupported()> _SOURCE_
<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.SecureRandom)> _SINK_
<javax.crypto.KeyGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyGeneratorSpi: void engineInit(int,java.security.SecureRandom)> _SINK_
<javax.crypto.KeyGeneratorSpi: javax.crypto.SecretKey engineGenerateKey()> _SOURCE_
<javax.crypto.CryptoPolicyParser: void read(java.io.Reader)> _SINK_
<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPolicyParser.GrantEntry parseGrantEntry(java.util.Hashtable)> _SINK_
<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPolicyParser.GrantEntry parseGrantEntry(java.util.Hashtable)> _SOURCE_
<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPolicyParser.CryptoPermissionEntry parsePermissionEntry(java.util.Hashtable)> _SINK_
<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPolicyParser.CryptoPermissionEntry parsePermissionEntry(java.util.Hashtable)> _SOURCE_
<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])> _SINK_
<javax.crypto.CryptoPolicyParser: java.security.spec.AlgorithmParameterSpec getInstance(java.lang.String,java.lang.Integer[])> _SOURCE_
<javax.crypto.CryptoPolicyParser: boolean peekAndMatch(java.lang.String)> _SINK_
<javax.crypto.CryptoPolicyParser: boolean peekAndMatch(java.lang.String)> _SOURCE_
<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)> _SINK_
<javax.crypto.CryptoPolicyParser: boolean peek(java.lang.String)> _SOURCE_
<javax.crypto.CryptoPolicyParser: int match()> _SOURCE_
<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)> _SINK_
<javax.crypto.CryptoPolicyParser: java.lang.String match(java.lang.String)> _SOURCE_
<javax.crypto.CryptoPolicyParser: javax.crypto.CryptoPermission[] getPermissions()> _SOURCE_
<javax.crypto.CryptoPolicyParser: boolean isConsistent(java.lang.String,java.lang.String,java.util.Hashtable)> _SINK_
<javax.crypto.CryptoPolicyParser: boolean isConsistent(java.lang.String,java.lang.String,java.util.Hashtable)> _SOURCE_
<javax.crypto.GrantEntry: void add(javax.crypto.CryptoPolicyParser.CryptoPermissionEntry)> _SINK_
<javax.crypto.GrantEntry: boolean remove(javax.crypto.CryptoPolicyParser.CryptoPermissionEntry)> _SINK_
<javax.crypto.GrantEntry: boolean remove(javax.crypto.CryptoPolicyParser.CryptoPermissionEntry)> _SOURCE_
<javax.crypto.GrantEntry: boolean contains(javax.crypto.CryptoPolicyParser.CryptoPermissionEntry)> _SINK_
<javax.crypto.GrantEntry: boolean contains(javax.crypto.CryptoPolicyParser.CryptoPermissionEntry)> _SOURCE_
<javax.crypto.GrantEntry: java.util.Enumeration permissionElements()> _SOURCE_
<javax.crypto.CryptoPermissionEntry: int hashCode()> _SOURCE_
<javax.crypto.CryptoPermissionEntry: boolean equals(java.lang.Object)> _SINK_
<javax.crypto.CryptoPermissionEntry: boolean equals(java.lang.Object)> _SOURCE_
<javax.crypto.ParsingException: ParsingException(java.lang.String)> _SINK_
<javax.crypto.ParsingException: ParsingException(int,java.lang.String)> _SINK_
<javax.crypto.ParsingException: ParsingException(int,java.lang.String,java.lang.String)> _SINK_
<java.security.URIParameter: URIParameter(java.net.URI)> _SINK_
<java.security.URIParameter: java.net.URI getURI()> _SOURCE_
<java.security.DigestException: DigestException(java.lang.String)> _SINK_
<java.security.DigestException: DigestException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.DigestException: DigestException(java.lang.Throwable)> _SINK_
<java.security.KeyFactorySpi: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)> _SINK_
<java.security.KeyFactorySpi: java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec)> _SOURCE_
<java.security.KeyFactorySpi: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)> _SINK_
<java.security.KeyFactorySpi: java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec)> _SOURCE_
<java.security.KeyFactorySpi: T engineGetKeySpec(java.security.Key,java.lang.Class<T>)> _SINK_
<java.security.KeyFactorySpi: T engineGetKeySpec(java.security.Key,java.lang.Class<T>)> _SOURCE_
<java.security.KeyFactorySpi: java.security.Key engineTranslateKey(java.security.Key)> _SINK_
<java.security.KeyFactorySpi: java.security.Key engineTranslateKey(java.security.Key)> _SOURCE_
<java.security.Certificate: java.security.Principal getGuarantor()> _SOURCE_
<java.security.Certificate: java.security.Principal getPrincipal()> _SOURCE_
<java.security.Certificate: java.security.PublicKey getPublicKey()> _SOURCE_
<java.security.Certificate: void encode(java.io.OutputStream)> _SINK_
<java.security.Certificate: void decode(java.io.InputStream)> _SINK_
<java.security.Certificate: java.lang.String getFormat()> _SOURCE_
<java.security.Certificate: java.lang.String toString(boolean)> _SINK_
<java.security.Certificate: java.lang.String toString(boolean)> _SOURCE_
<java.security.InvalidParameterException: InvalidParameterException(java.lang.String)> _SINK_
<java.security.InvalidAlgorithmParameterException: InvalidAlgorithmParameterException(java.lang.String)> _SINK_
<java.security.InvalidAlgorithmParameterException: InvalidAlgorithmParameterException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.InvalidAlgorithmParameterException: InvalidAlgorithmParameterException(java.lang.Throwable)> _SINK_
<java.security.Signer: Signer(java.lang.String)> _SINK_
<java.security.Signer: Signer(java.lang.String,java.security.IdentityScope)> _SINK_
<java.security.Signer: java.security.PrivateKey getPrivateKey()> _SOURCE_
<java.security.Signer: void setKeyPair(java.security.KeyPair)> _SINK_
<java.security.Signer: java.lang.String printKeys()> _SOURCE_
<java.security.Signer: java.lang.String toString()> _SOURCE_
<java.security.Signer: void check(java.lang.String)> _SINK_
<java.security.Timestamp: Timestamp(java.util.Date,java.security.cert.CertPath)> _SINK_
<java.security.Timestamp: java.util.Date getTimestamp()> _SOURCE_
<java.security.Timestamp: java.security.cert.CertPath getSignerCertPath()> _SOURCE_
<java.security.Timestamp: int hashCode()> _SOURCE_
<java.security.Timestamp: boolean equals(java.lang.Object)> _SINK_
<java.security.Timestamp: boolean equals(java.lang.Object)> _SOURCE_
<java.security.Timestamp: java.lang.String toString()> _SOURCE_
<java.security.Timestamp: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.KeyException: KeyException(java.lang.String)> _SINK_
<java.security.KeyException: KeyException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.KeyException: KeyException(java.lang.Throwable)> _SINK_
<java.security.PrivilegedActionException: PrivilegedActionException(java.lang.Exception)> _SINK_
<java.security.PrivilegedActionException: java.lang.Exception getException()> _SOURCE_
<java.security.PrivilegedActionException: java.lang.Throwable getCause()> _SOURCE_
<java.security.PrivilegedActionException: java.lang.String toString()> _SOURCE_
<java.security.AlgorithmParametersSpi: void engineInit(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.AlgorithmParametersSpi: void engineInit(byte[])> _SINK_
<java.security.AlgorithmParametersSpi: void engineInit(byte[],java.lang.String)> _SINK_
<java.security.AlgorithmParametersSpi: T engineGetParameterSpec(java.lang.Class<T>)> _SINK_
<java.security.AlgorithmParametersSpi: T engineGetParameterSpec(java.lang.Class<T>)> _SOURCE_
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded()> _SOURCE_
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded(java.lang.String)> _SINK_
<java.security.AlgorithmParametersSpi: byte[] engineGetEncoded(java.lang.String)> _SOURCE_
<java.security.AlgorithmParametersSpi: java.lang.String engineToString()> _SOURCE_
<java.security.NoSuchProviderException: NoSuchProviderException(java.lang.String)> _SINK_
<java.security.Security: java.io.File securityPropFile(java.lang.String)> _SINK_
<java.security.Security: java.io.File securityPropFile(java.lang.String)> _SOURCE_
<java.security.Security: java.security.Security.ProviderProperty getProviderProperty(java.lang.String)> _SINK_
<java.security.Security: java.security.Security.ProviderProperty getProviderProperty(java.lang.String)> _SOURCE_
<java.security.Security: java.lang.String getProviderProperty(java.lang.String,java.security.Provider)> _SINK_
<java.security.Security: java.lang.String getProviderProperty(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)> _SINK_
<java.security.Security: java.lang.String getAlgorithmProperty(java.lang.String,java.lang.String)> _SOURCE_
<java.security.Security: int insertProviderAt(java.security.Provider,int)> _SINK_
<java.security.Security: int insertProviderAt(java.security.Provider,int)> _SOURCE_
<java.security.Security: int addProvider(java.security.Provider)> _SINK_
<java.security.Security: int addProvider(java.security.Provider)> _SOURCE_
<java.security.Security: void removeProvider(java.lang.String)> _SINK_
<java.security.Security: java.security.Provider[] getProviders()> _SOURCE_
<java.security.Security: java.security.Provider getProvider(java.lang.String)> _SINK_
<java.security.Security: java.security.Provider getProvider(java.lang.String)> _SOURCE_
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)> _SINK_
<java.security.Security: java.security.Provider[] getProviders(java.lang.String)> _SOURCE_
<java.security.Security: java.security.Provider[] getProviders(java.util.Map<String,String>)> _SINK_
<java.security.Security: java.security.Provider[] getProviders(java.util.Map<String,String>)> _SOURCE_
<java.security.Security: java.lang.Class getSpiClass(java.lang.String)> _SINK_
<java.security.Security: java.lang.Class getSpiClass(java.lang.String)> _SOURCE_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)> _SINK_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String)> _SOURCE_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> _SINK_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)> _SOURCE_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)> _SINK_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider)> _SOURCE_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider,java.lang.Object)> _SINK_
<java.security.Security: java.lang.Object[] getImpl(java.lang.String,java.lang.String,java.security.Provider,java.lang.Object)> _SOURCE_
<java.security.Security: java.lang.String getProperty(java.lang.String)> _SINK_
<java.security.Security: java.lang.String getProperty(java.lang.String)> _SOURCE_
<java.security.Security: void setProperty(java.lang.String,java.lang.String)> _SINK_
<java.security.Security: void invalidateSMCache(java.lang.String)> _SINK_
<java.security.Security: void check(java.lang.String)> _SINK_
<java.security.Security: java.util.LinkedHashSet<Provider> getAllQualifyingCandidates(java.lang.String,java.lang.String,java.security.Provider[])> _SINK_
<java.security.Security: java.util.LinkedHashSet<Provider> getAllQualifyingCandidates(java.lang.String,java.lang.String,java.security.Provider[])> _SOURCE_
<java.security.Security: java.util.LinkedHashSet<Provider> getProvidersNotUsingCache(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.Provider[])> _SINK_
<java.security.Security: java.util.LinkedHashSet<Provider> getProvidersNotUsingCache(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.Provider[])> _SOURCE_
<java.security.Security: boolean isCriterionSatisfied(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> _SINK_
<java.security.Security: boolean isCriterionSatisfied(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> _SOURCE_
<java.security.Security: boolean isStandardAttr(java.lang.String)> _SINK_
<java.security.Security: boolean isStandardAttr(java.lang.String)> _SOURCE_
<java.security.Security: boolean isConstraintSatisfied(java.lang.String,java.lang.String,java.lang.String)> _SINK_
<java.security.Security: boolean isConstraintSatisfied(java.lang.String,java.lang.String,java.lang.String)> _SOURCE_
<java.security.Security: java.lang.String[] getFilterComponents(java.lang.String,java.lang.String)> _SINK_
<java.security.Security: java.lang.String[] getFilterComponents(java.lang.String,java.lang.String)> _SOURCE_
<java.security.Security: java.util.Set<String> getAlgorithms(java.lang.String)> _SINK_
<java.security.Security: java.util.Set<String> getAlgorithms(java.lang.String)> _SOURCE_
<java.security.cert.CertificateFactory: CertificateFactory(java.security.cert.CertificateFactorySpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String)> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertificateFactory getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.cert.CertificateFactory: java.security.Provider getProvider()> _SOURCE_
<java.security.cert.CertificateFactory: java.lang.String getType()> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.Certificate generateCertificate(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactory: java.util.Iterator<String> getCertPathEncodings()> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream,java.lang.String)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.io.InputStream,java.lang.String)> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List<Certificate>)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CertPath generateCertPath(java.util.List<Certificate>)> _SOURCE_
<java.security.cert.CertificateFactory: java.util.Collection<Certificate> generateCertificates(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactory: java.util.Collection<Certificate> generateCertificates(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactory: java.security.cert.CRL generateCRL(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactory: java.util.Collection<CRL> generateCRLs(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactory: java.util.Collection<CRL> generateCRLs(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateRevokedException: CertificateRevokedException(java.util.Date,java.security.cert.CRLReason,javax.security.auth.x500.X500Principal,java.util.Map<String,Extension>)> _SINK_
<java.security.cert.CertificateRevokedException: java.util.Date getRevocationDate()> _SOURCE_
<java.security.cert.CertificateRevokedException: java.security.cert.CRLReason getRevocationReason()> _SOURCE_
<java.security.cert.CertificateRevokedException: javax.security.auth.x500.X500Principal getAuthorityName()> _SOURCE_
<java.security.cert.CertificateRevokedException: java.util.Date getInvalidityDate()> _SOURCE_
<java.security.cert.CertificateRevokedException: java.util.Map<String,Extension> getExtensions()> _SOURCE_
<java.security.cert.CertificateRevokedException: java.lang.String getMessage()> _SOURCE_
<java.security.cert.CertificateRevokedException: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.cert.CertificateRevokedException: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.cert.X509CRLSelector: void setIssuers(java.util.Collection<X500Principal>)> _SINK_
<java.security.cert.X509CRLSelector: void setIssuerNames(java.util.Collection<?>)> _SINK_
<java.security.cert.X509CRLSelector: void addIssuer(javax.security.auth.x500.X500Principal)> _SINK_
<java.security.cert.X509CRLSelector: void addIssuerName(java.lang.String)> _SINK_
<java.security.cert.X509CRLSelector: void addIssuerName(byte[])> _SINK_
<java.security.cert.X509CRLSelector: void addIssuerNameInternal(java.lang.Object,javax.security.auth.x500.X500Principal)> _SINK_
<java.security.cert.X509CRLSelector: java.util.HashSet<Object> cloneAndCheckIssuerNames(java.util.Collection<?>)> _SINK_
<java.security.cert.X509CRLSelector: java.util.HashSet<Object> cloneAndCheckIssuerNames(java.util.Collection<?>)> _SOURCE_
<java.security.cert.X509CRLSelector: java.util.HashSet<Object> cloneIssuerNames(java.util.Collection<Object>)> _SINK_
<java.security.cert.X509CRLSelector: java.util.HashSet<Object> cloneIssuerNames(java.util.Collection<Object>)> _SOURCE_
<java.security.cert.X509CRLSelector: java.util.HashSet<X500Principal> parseIssuerNames(java.util.Collection<Object>)> _SINK_
<java.security.cert.X509CRLSelector: java.util.HashSet<X500Principal> parseIssuerNames(java.util.Collection<Object>)> _SOURCE_
<java.security.cert.X509CRLSelector: void setMinCRLNumber(java.math.BigInteger)> _SINK_
<java.security.cert.X509CRLSelector: void setMaxCRLNumber(java.math.BigInteger)> _SINK_
<java.security.cert.X509CRLSelector: void setDateAndTime(java.util.Date)> _SINK_
<java.security.cert.X509CRLSelector: void setDateAndTime(java.util.Date,long)> _SINK_
<java.security.cert.X509CRLSelector: void setCertificateChecking(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CRLSelector: java.util.Collection<X500Principal> getIssuers()> _SOURCE_
<java.security.cert.X509CRLSelector: java.util.Collection<Object> getIssuerNames()> _SOURCE_
<java.security.cert.X509CRLSelector: java.math.BigInteger getMinCRL()> _SOURCE_
<java.security.cert.X509CRLSelector: java.math.BigInteger getMaxCRL()> _SOURCE_
<java.security.cert.X509CRLSelector: java.util.Date getDateAndTime()> _SOURCE_
<java.security.cert.X509CRLSelector: java.security.cert.X509Certificate getCertificateChecking()> _SOURCE_
<java.security.cert.X509CRLSelector: java.lang.String toString()> _SOURCE_
<java.security.cert.X509CRLSelector: boolean match(java.security.cert.CRL)> _SINK_
<java.security.cert.X509CRLSelector: boolean match(java.security.cert.CRL)> _SOURCE_
<java.security.cert.X509CRLSelector: java.lang.Object clone()> _SOURCE_
<java.security.cert.X509CertSelector: void setCertificate(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: void setSerialNumber(java.math.BigInteger)> _SINK_
<java.security.cert.X509CertSelector: void setIssuer(javax.security.auth.x500.X500Principal)> _SINK_
<java.security.cert.X509CertSelector: void setIssuer(java.lang.String)> _SINK_
<java.security.cert.X509CertSelector: void setIssuer(byte[])> _SINK_
<java.security.cert.X509CertSelector: void setSubject(javax.security.auth.x500.X500Principal)> _SINK_
<java.security.cert.X509CertSelector: void setSubject(java.lang.String)> _SINK_
<java.security.cert.X509CertSelector: void setSubject(byte[])> _SINK_
<java.security.cert.X509CertSelector: void setSubjectKeyIdentifier(byte[])> _SINK_
<java.security.cert.X509CertSelector: void setAuthorityKeyIdentifier(byte[])> _SINK_
<java.security.cert.X509CertSelector: void setCertificateValid(java.util.Date)> _SINK_
<java.security.cert.X509CertSelector: void setPrivateKeyValid(java.util.Date)> _SINK_
<java.security.cert.X509CertSelector: void setSubjectPublicKeyAlgID(java.lang.String)> _SINK_
<java.security.cert.X509CertSelector: void setSubjectPublicKey(java.security.PublicKey)> _SINK_
<java.security.cert.X509CertSelector: void setSubjectPublicKey(byte[])> _SINK_
<java.security.cert.X509CertSelector: void setKeyUsage(boolean[])> _SINK_
<java.security.cert.X509CertSelector: void setExtendedKeyUsage(java.util.Set<String>)> _SINK_
<java.security.cert.X509CertSelector: void setMatchAllSubjectAltNames(boolean)> _SINK_
<java.security.cert.X509CertSelector: void setSubjectAlternativeNames(java.util.Collection<List<?>>)> _SINK_
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,java.lang.String)> _SINK_
<java.security.cert.X509CertSelector: void addSubjectAlternativeName(int,byte[])> _SINK_
<java.security.cert.X509CertSelector: void addSubjectAlternativeNameInternal(int,java.lang.Object)> _SINK_
<java.security.cert.X509CertSelector: java.util.Set<GeneralNameInterface> parseNames(java.util.Collection<List<?>>)> _SINK_
<java.security.cert.X509CertSelector: java.util.Set<GeneralNameInterface> parseNames(java.util.Collection<List<?>>)> _SOURCE_
<java.security.cert.X509CertSelector: boolean equalNames(java.util.Collection,java.util.Collection)> _SINK_
<java.security.cert.X509CertSelector: boolean equalNames(java.util.Collection,java.util.Collection)> _SOURCE_
<java.security.cert.X509CertSelector: sun.security.x509.GeneralNameInterface makeGeneralNameInterface(int,java.lang.Object)> _SINK_
<java.security.cert.X509CertSelector: sun.security.x509.GeneralNameInterface makeGeneralNameInterface(int,java.lang.Object)> _SOURCE_
<java.security.cert.X509CertSelector: void setNameConstraints(byte[])> _SINK_
<java.security.cert.X509CertSelector: void setBasicConstraints(int)> _SINK_
<java.security.cert.X509CertSelector: void setPolicy(java.util.Set<String>)> _SINK_
<java.security.cert.X509CertSelector: void setPathToNames(java.util.Collection<List<?>>)> _SINK_
<java.security.cert.X509CertSelector: void setPathToNamesInternal(java.util.Set<GeneralNameInterface>)> _SINK_
<java.security.cert.X509CertSelector: void addPathToName(int,java.lang.String)> _SINK_
<java.security.cert.X509CertSelector: void addPathToName(int,byte[])> _SINK_
<java.security.cert.X509CertSelector: void addPathToNameInternal(int,java.lang.Object)> _SINK_
<java.security.cert.X509CertSelector: java.security.cert.X509Certificate getCertificate()> _SOURCE_
<java.security.cert.X509CertSelector: java.math.BigInteger getSerialNumber()> _SOURCE_
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getIssuer()> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getIssuerAsString()> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getIssuerAsBytes()> _SOURCE_
<java.security.cert.X509CertSelector: javax.security.auth.x500.X500Principal getSubject()> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getSubjectAsString()> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getSubjectAsBytes()> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getSubjectKeyIdentifier()> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getAuthorityKeyIdentifier()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Date getCertificateValid()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Date getPrivateKeyValid()> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String getSubjectPublicKeyAlgID()> _SOURCE_
<java.security.cert.X509CertSelector: java.security.PublicKey getSubjectPublicKey()> _SOURCE_
<java.security.cert.X509CertSelector: boolean[] getKeyUsage()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set<String> getExtendedKeyUsage()> _SOURCE_
<java.security.cert.X509CertSelector: boolean getMatchAllSubjectAltNames()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Collection<List<?>> getSubjectAlternativeNames()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set<List<?>> cloneNames(java.util.Collection<List<?>>)> _SINK_
<java.security.cert.X509CertSelector: java.util.Set<List<?>> cloneNames(java.util.Collection<List<?>>)> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set<List<?>> cloneAndCheckNames(java.util.Collection<List<?>>)> _SINK_
<java.security.cert.X509CertSelector: java.util.Set<List<?>> cloneAndCheckNames(java.util.Collection<List<?>>)> _SOURCE_
<java.security.cert.X509CertSelector: byte[] getNameConstraints()> _SOURCE_
<java.security.cert.X509CertSelector: int getBasicConstraints()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set<String> getPolicy()> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Collection<List<?>> getPathToNames()> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String toString()> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.String keyUsageToString(boolean[])> _SINK_
<java.security.cert.X509CertSelector: java.lang.String keyUsageToString(boolean[])> _SOURCE_
<java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)> _SINK_
<java.security.cert.X509CertSelector: java.security.cert.Extension getExtensionObject(java.security.cert.X509Certificate,int)> _SOURCE_
<java.security.cert.X509CertSelector: boolean match(java.security.cert.Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean match(java.security.cert.Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchSubjectKeyID(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchSubjectKeyID(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchAuthorityKeyID(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchAuthorityKeyID(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchPrivateKeyValid(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchPrivateKeyValid(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchSubjectPublicKeyAlgID(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchSubjectPublicKeyAlgID(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchKeyUsage(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchKeyUsage(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchExtendedKeyUsage(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchExtendedKeyUsage(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchSubjectAlternativeNames(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchSubjectAlternativeNames(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchNameConstraints(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchNameConstraints(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchPolicy(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchPolicy(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchPathToNames(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchPathToNames(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchExcluded(java.util.GeneralSubtrees)> _SINK_
<java.security.cert.X509CertSelector: boolean matchExcluded(java.util.GeneralSubtrees)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchPermitted(java.util.GeneralSubtrees)> _SINK_
<java.security.cert.X509CertSelector: boolean matchPermitted(java.util.GeneralSubtrees)> _SOURCE_
<java.security.cert.X509CertSelector: boolean matchBasicConstraints(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CertSelector: boolean matchBasicConstraints(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CertSelector: java.util.Set<?> cloneSet(java.util.Set<?>)> _SINK_
<java.security.cert.X509CertSelector: java.util.Set<?> cloneSet(java.util.Set<?>)> _SOURCE_
<java.security.cert.X509CertSelector: java.lang.Object clone()> _SOURCE_
<java.security.cert.X509Extension: boolean hasUnsupportedCriticalExtension()> _SOURCE_
<java.security.cert.X509Extension: java.util.Set<String> getCriticalExtensionOIDs()> _SOURCE_
<java.security.cert.X509Extension: java.util.Set<String> getNonCriticalExtensionOIDs()> _SOURCE_
<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)> _SINK_
<java.security.cert.X509Extension: byte[] getExtensionValue(java.lang.String)> _SOURCE_
<java.security.cert.PKIXBuilderParameters: PKIXBuilderParameters(java.util.Set<TrustAnchor>,java.security.cert.CertSelector)> _SINK_
<java.security.cert.PKIXBuilderParameters: PKIXBuilderParameters(java.security.KeyStore,java.security.cert.CertSelector)> _SINK_
<java.security.cert.PKIXBuilderParameters: void setMaxPathLength(int)> _SINK_
<java.security.cert.PKIXBuilderParameters: int getMaxPathLength()> _SOURCE_
<java.security.cert.PKIXBuilderParameters: java.lang.String toString()> _SOURCE_
<java.security.cert.CertificateParsingException: CertificateParsingException(java.lang.String)> _SINK_
<java.security.cert.CertificateParsingException: CertificateParsingException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.CertificateParsingException: CertificateParsingException(java.lang.Throwable)> _SINK_
<java.security.cert.Certificate: Certificate(java.lang.String)> _SINK_
<java.security.cert.Certificate: java.lang.String getType()> _SOURCE_
<java.security.cert.Certificate: boolean equals(java.lang.Object)> _SINK_
<java.security.cert.Certificate: boolean equals(java.lang.Object)> _SOURCE_
<java.security.cert.Certificate: int hashCode()> _SOURCE_
<java.security.cert.Certificate: byte[] getEncoded()> _SOURCE_
<java.security.cert.Certificate: void verify(java.security.PublicKey)> _SINK_
<java.security.cert.Certificate: void verify(java.security.PublicKey,java.lang.String)> _SINK_
<java.security.cert.Certificate: java.lang.String toString()> _SOURCE_
<java.security.cert.Certificate: java.security.PublicKey getPublicKey()> _SOURCE_
<java.security.cert.CertificateRep: CertificateRep(java.lang.String,byte[])> _SINK_
<java.security.cert.CertificateRep: java.lang.Object readResolve()> _SOURCE_
<java.security.cert.Certificate: java.lang.Object writeReplace()> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: LDAPCertStoreParameters(java.lang.String,int)> _SINK_
<java.security.cert.LDAPCertStoreParameters: LDAPCertStoreParameters(java.lang.String)> _SINK_
<java.security.cert.LDAPCertStoreParameters: java.lang.String getServerName()> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: int getPort()> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: java.lang.Object clone()> _SOURCE_
<java.security.cert.LDAPCertStoreParameters: java.lang.String toString()> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactorySpi: java.security.cert.Certificate engineGenerateCertificate(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)> _SINK_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.io.InputStream,java.lang.String)> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List<Certificate>)> _SINK_
<java.security.cert.CertificateFactorySpi: java.security.cert.CertPath engineGenerateCertPath(java.util.List<Certificate>)> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.util.Iterator<String> engineGetCertPathEncodings()> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.util.Collection<Certificate> engineGenerateCertificates(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactorySpi: java.util.Collection<Certificate> engineGenerateCertificates(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.security.cert.CRL engineGenerateCRL(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactorySpi: java.security.cert.CRL engineGenerateCRL(java.io.InputStream)> _SOURCE_
<java.security.cert.CertificateFactorySpi: java.util.Collection<CRL> engineGenerateCRLs(java.io.InputStream)> _SINK_
<java.security.cert.CertificateFactorySpi: java.util.Collection<CRL> engineGenerateCRLs(java.io.InputStream)> _SOURCE_
<java.security.cert.CertPathBuilderSpi: java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)> _SINK_
<java.security.cert.CertPathBuilderSpi: java.security.cert.CertPathBuilderResult engineBuild(java.security.cert.CertPathParameters)> _SOURCE_
<java.security.cert.PolicyNode: java.security.cert.PolicyNode getParent()> _SOURCE_
<java.security.cert.PolicyNode: java.util.Iterator<PolicyNode> getChildren()> _SOURCE_
<java.security.cert.PolicyNode: int getDepth()> _SOURCE_
<java.security.cert.PolicyNode: java.lang.String getValidPolicy()> _SOURCE_
<java.security.cert.PolicyNode: java.util.Set<PolicyQualifierInfo> getPolicyQualifiers()> _SOURCE_
<java.security.cert.PolicyNode: java.util.Set<String> getExpectedPolicies()> _SOURCE_
<java.security.cert.PolicyNode: boolean isCritical()> _SOURCE_
<java.security.cert.CertStoreParameters: java.lang.Object clone()> _SOURCE_
<java.security.cert.CRL: CRL(java.lang.String)> _SINK_
<java.security.cert.CRL: java.lang.String getType()> _SOURCE_
<java.security.cert.CRL: java.lang.String toString()> _SOURCE_
<java.security.cert.CRL: boolean isRevoked(java.security.cert.Certificate)> _SINK_
<java.security.cert.CRL: boolean isRevoked(java.security.cert.Certificate)> _SOURCE_
<java.security.cert.CertPathHelperImpl: void implSetPathToNames(java.security.cert.X509CertSelector,java.util.Set<GeneralNameInterface>)> _SINK_
<java.security.cert.CertPathHelperImpl: void implSetDateAndTime(java.security.cert.X509CRLSelector,java.util.Date,long)> _SINK_
<java.security.cert.CollectionCertStoreParameters: CollectionCertStoreParameters(java.util.Collection<?>)> _SINK_
<java.security.cert.CollectionCertStoreParameters: java.util.Collection<?> getCollection()> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: java.lang.Object clone()> _SOURCE_
<java.security.cert.CollectionCertStoreParameters: java.lang.String toString()> _SOURCE_
<java.security.cert.CertPathValidator: CertPathValidator(java.security.cert.CertPathValidatorSpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String)> _SOURCE_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidator getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.cert.CertPathValidator: java.security.Provider getProvider()> _SOURCE_
<java.security.cert.CertPathValidator: java.lang.String getAlgorithm()> _SOURCE_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)> _SINK_
<java.security.cert.CertPathValidator: java.security.cert.CertPathValidatorResult validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)> _SOURCE_
<java.security.cert.CertPathValidator: java.lang.String getDefaultType()> _SOURCE_
<java.security.cert.CertPathBuilderException: CertPathBuilderException(java.lang.String)> _SINK_
<java.security.cert.CertPathBuilderException: CertPathBuilderException(java.lang.Throwable)> _SINK_
<java.security.cert.CertPathBuilderException: CertPathBuilderException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.CertPathValidatorSpi: java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)> _SINK_
<java.security.cert.CertPathValidatorSpi: java.security.cert.CertPathValidatorResult engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)> _SOURCE_
<java.security.cert.PKIXParameters: PKIXParameters(java.util.Set<TrustAnchor>)> _SINK_
<java.security.cert.PKIXParameters: PKIXParameters(java.security.KeyStore)> _SINK_
<java.security.cert.PKIXParameters: java.util.Set<TrustAnchor> getTrustAnchors()> _SOURCE_
<java.security.cert.PKIXParameters: void setTrustAnchors(java.util.Set<TrustAnchor>)> _SINK_
<java.security.cert.PKIXParameters: java.util.Set<String> getInitialPolicies()> _SOURCE_
<java.security.cert.PKIXParameters: void setInitialPolicies(java.util.Set<String>)> _SINK_
<java.security.cert.PKIXParameters: void setCertStores(java.util.List<CertStore>)> _SINK_
<java.security.cert.PKIXParameters: void addCertStore(java.security.cert.CertStore)> _SINK_
<java.security.cert.PKIXParameters: java.util.List<CertStore> getCertStores()> _SOURCE_
<java.security.cert.PKIXParameters: void setRevocationEnabled(boolean)> _SINK_
<java.security.cert.PKIXParameters: boolean isRevocationEnabled()> _SOURCE_
<java.security.cert.PKIXParameters: void setExplicitPolicyRequired(boolean)> _SINK_
<java.security.cert.PKIXParameters: boolean isExplicitPolicyRequired()> _SOURCE_
<java.security.cert.PKIXParameters: void setPolicyMappingInhibited(boolean)> _SINK_
<java.security.cert.PKIXParameters: boolean isPolicyMappingInhibited()> _SOURCE_
<java.security.cert.PKIXParameters: void setAnyPolicyInhibited(boolean)> _SINK_
<java.security.cert.PKIXParameters: boolean isAnyPolicyInhibited()> _SOURCE_
<java.security.cert.PKIXParameters: void setPolicyQualifiersRejected(boolean)> _SINK_
<java.security.cert.PKIXParameters: boolean getPolicyQualifiersRejected()> _SOURCE_
<java.security.cert.PKIXParameters: java.util.Date getDate()> _SOURCE_
<java.security.cert.PKIXParameters: void setDate(java.util.Date)> _SINK_
<java.security.cert.PKIXParameters: void setCertPathCheckers(java.util.List<PKIXCertPathChecker>)> _SINK_
<java.security.cert.PKIXParameters: java.util.List<PKIXCertPathChecker> getCertPathCheckers()> _SOURCE_
<java.security.cert.PKIXParameters: void addCertPathChecker(java.security.cert.PKIXCertPathChecker)> _SINK_
<java.security.cert.PKIXParameters: java.lang.String getSigProvider()> _SOURCE_
<java.security.cert.PKIXParameters: void setSigProvider(java.lang.String)> _SINK_
<java.security.cert.PKIXParameters: java.security.cert.CertSelector getTargetCertConstraints()> _SOURCE_
<java.security.cert.PKIXParameters: void setTargetCertConstraints(java.security.cert.CertSelector)> _SINK_
<java.security.cert.PKIXParameters: java.lang.Object clone()> _SOURCE_
<java.security.cert.PKIXParameters: java.lang.String toString()> _SOURCE_
<java.security.cert.CertStoreException: CertStoreException(java.lang.String)> _SINK_
<java.security.cert.CertStoreException: CertStoreException(java.lang.Throwable)> _SINK_
<java.security.cert.CertStoreException: CertStoreException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.Extension: java.lang.String getId()> _SOURCE_
<java.security.cert.Extension: boolean isCritical()> _SOURCE_
<java.security.cert.Extension: byte[] getValue()> _SOURCE_
<java.security.cert.Extension: void encode(java.io.OutputStream)> _SINK_
<java.security.cert.CertStore: CertStore(java.security.cert.CertStoreSpi,java.security.Provider,java.lang.String,java.security.cert.CertStoreParameters)> _SINK_
<java.security.cert.CertStore: java.util.Collection<Certificate> getCertificates(java.security.cert.CertSelector)> _SINK_
<java.security.cert.CertStore: java.util.Collection<Certificate> getCertificates(java.security.cert.CertSelector)> _SOURCE_
<java.security.cert.CertStore: java.util.Collection<CRL> getCRLs(java.security.cert.CRLSelector)> _SINK_
<java.security.cert.CertStore: java.util.Collection<CRL> getCRLs(java.security.cert.CRLSelector)> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters)> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStore handleException(java.security.NoSuchAlgorithmException)> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore handleException(java.security.NoSuchAlgorithmException)> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.lang.String)> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)> _SINK_
<java.security.cert.CertStore: java.security.cert.CertStore getInstance(java.lang.String,java.security.cert.CertStoreParameters,java.security.Provider)> _SOURCE_
<java.security.cert.CertStore: java.security.cert.CertStoreParameters getCertStoreParameters()> _SOURCE_
<java.security.cert.CertStore: java.lang.String getType()> _SOURCE_
<java.security.cert.CertStore: java.security.Provider getProvider()> _SOURCE_
<java.security.cert.CertStore: java.lang.String getDefaultType()> _SOURCE_
<java.security.cert.PKIXCertPathBuilderResult: PKIXCertPathBuilderResult(java.security.cert.CertPath,java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)> _SINK_
<java.security.cert.PKIXCertPathBuilderResult: java.security.cert.CertPath getCertPath()> _SOURCE_
<java.security.cert.PKIXCertPathBuilderResult: java.lang.String toString()> _SOURCE_
<java.security.cert.X509Certificate: void checkValidity(java.util.Date)> _SINK_
<java.security.cert.X509Certificate: int getVersion()> _SOURCE_
<java.security.cert.X509Certificate: java.math.BigInteger getSerialNumber()> _SOURCE_
<java.security.cert.X509Certificate: java.security.Principal getIssuerDN()> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getIssuerX500Principal()> _SOURCE_
<java.security.cert.X509Certificate: java.security.Principal getSubjectDN()> _SOURCE_
<java.security.cert.X509Certificate: javax.security.auth.x500.X500Principal getSubjectX500Principal()> _SOURCE_
<java.security.cert.X509Certificate: java.util.Date getNotBefore()> _SOURCE_
<java.security.cert.X509Certificate: java.util.Date getNotAfter()> _SOURCE_
<java.security.cert.X509Certificate: byte[] getTBSCertificate()> _SOURCE_
<java.security.cert.X509Certificate: byte[] getSignature()> _SOURCE_
<java.security.cert.X509Certificate: java.lang.String getSigAlgName()> _SOURCE_
<java.security.cert.X509Certificate: java.lang.String getSigAlgOID()> _SOURCE_
<java.security.cert.X509Certificate: byte[] getSigAlgParams()> _SOURCE_
<java.security.cert.X509Certificate: boolean[] getIssuerUniqueID()> _SOURCE_
<java.security.cert.X509Certificate: boolean[] getSubjectUniqueID()> _SOURCE_
<java.security.cert.X509Certificate: boolean[] getKeyUsage()> _SOURCE_
<java.security.cert.X509Certificate: java.util.List<String> getExtendedKeyUsage()> _SOURCE_
<java.security.cert.X509Certificate: int getBasicConstraints()> _SOURCE_
<java.security.cert.X509Certificate: java.util.Collection<List<?>> getSubjectAlternativeNames()> _SOURCE_
<java.security.cert.X509Certificate: java.util.Collection<List<?>> getIssuerAlternativeNames()> _SOURCE_
<java.security.cert.CertificateExpiredException: CertificateExpiredException(java.lang.String)> _SINK_
<java.security.cert.CertificateEncodingException: CertificateEncodingException(java.lang.String)> _SINK_
<java.security.cert.CertificateEncodingException: CertificateEncodingException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.CertificateEncodingException: CertificateEncodingException(java.lang.Throwable)> _SINK_
<java.security.cert.CRLException: CRLException(java.lang.String)> _SINK_
<java.security.cert.CRLException: CRLException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.CRLException: CRLException(java.lang.Throwable)> _SINK_
<java.security.cert.CertificateNotYetValidException: CertificateNotYetValidException(java.lang.String)> _SINK_
<java.security.cert.CertPath: CertPath(java.lang.String)> _SINK_
<java.security.cert.CertPath: java.lang.String getType()> _SOURCE_
<java.security.cert.CertPath: java.util.Iterator<String> getEncodings()> _SOURCE_
<java.security.cert.CertPath: boolean equals(java.lang.Object)> _SINK_
<java.security.cert.CertPath: boolean equals(java.lang.Object)> _SOURCE_
<java.security.cert.CertPath: int hashCode()> _SOURCE_
<java.security.cert.CertPath: java.lang.String toString()> _SOURCE_
<java.security.cert.CertPath: byte[] getEncoded()> _SOURCE_
<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)> _SINK_
<java.security.cert.CertPath: byte[] getEncoded(java.lang.String)> _SOURCE_
<java.security.cert.CertPath: java.util.List<Certificate> getCertificates()> _SOURCE_
<java.security.cert.CertPath: java.lang.Object writeReplace()> _SOURCE_
<java.security.cert.CertPathRep: CertPathRep(java.lang.String,byte[])> _SINK_
<java.security.cert.CertPathRep: java.lang.Object readResolve()> _SOURCE_
<java.security.cert.CertPathValidatorException: CertPathValidatorException(java.lang.String)> _SINK_
<java.security.cert.CertPathValidatorException: CertPathValidatorException(java.lang.Throwable)> _SINK_
<java.security.cert.CertPathValidatorException: CertPathValidatorException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.CertPathValidatorException: CertPathValidatorException(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int)> _SINK_
<java.security.cert.CertPathValidatorException: CertPathValidatorException(java.lang.String,java.lang.Throwable,java.security.cert.CertPath,int,java.security.cert.CertPathValidatorException.Reason)> _SINK_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPath getCertPath()> _SOURCE_
<java.security.cert.CertPathValidatorException: int getIndex()> _SOURCE_
<java.security.cert.CertPathValidatorException: java.security.cert.CertPathValidatorException.Reason getReason()> _SOURCE_
<java.security.cert.CertPathValidatorException: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.cert.CertificateException: CertificateException(java.lang.String)> _SINK_
<java.security.cert.CertificateException: CertificateException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.cert.CertificateException: CertificateException(java.lang.Throwable)> _SINK_
<java.security.cert.CertPathParameters: java.lang.Object clone()> _SOURCE_
<java.security.cert.TrustAnchor: TrustAnchor(java.security.cert.X509Certificate,byte[])> _SINK_
<java.security.cert.TrustAnchor: TrustAnchor(javax.security.auth.x500.X500Principal,java.security.PublicKey,byte[])> _SINK_
<java.security.cert.TrustAnchor: TrustAnchor(java.lang.String,java.security.PublicKey,byte[])> _SINK_
<java.security.cert.TrustAnchor: java.security.cert.X509Certificate getTrustedCert()> _SOURCE_
<java.security.cert.TrustAnchor: javax.security.auth.x500.X500Principal getCA()> _SOURCE_
<java.security.cert.TrustAnchor: java.lang.String getCAName()> _SOURCE_
<java.security.cert.TrustAnchor: java.security.PublicKey getCAPublicKey()> _SOURCE_
<java.security.cert.TrustAnchor: void setNameConstraints(byte[])> _SINK_
<java.security.cert.TrustAnchor: byte[] getNameConstraints()> _SOURCE_
<java.security.cert.TrustAnchor: java.lang.String toString()> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: PKIXCertPathValidatorResult(java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)> _SINK_
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.TrustAnchor getTrustAnchor()> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.cert.PolicyNode getPolicyTree()> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.security.PublicKey getPublicKey()> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.lang.Object clone()> _SOURCE_
<java.security.cert.PKIXCertPathValidatorResult: java.lang.String toString()> _SOURCE_
<java.security.cert.PKIXCertPathChecker: void init(boolean)> _SINK_
<java.security.cert.PKIXCertPathChecker: boolean isForwardCheckingSupported()> _SOURCE_
<java.security.cert.PKIXCertPathChecker: java.util.Set<String> getSupportedExtensions()> _SOURCE_
<java.security.cert.PKIXCertPathChecker: void check(java.security.cert.Certificate,java.util.Collection<String>)> _SINK_
<java.security.cert.PKIXCertPathChecker: java.lang.Object clone()> _SOURCE_
<java.security.cert.PolicyQualifierInfo: PolicyQualifierInfo(byte[])> _SINK_
<java.security.cert.PolicyQualifierInfo: java.lang.String getPolicyQualifierId()> _SOURCE_
<java.security.cert.PolicyQualifierInfo: byte[] getEncoded()> _SOURCE_
<java.security.cert.PolicyQualifierInfo: byte[] getPolicyQualifier()> _SOURCE_
<java.security.cert.PolicyQualifierInfo: java.lang.String toString()> _SOURCE_
<java.security.cert.CertSelector: boolean match(java.security.cert.Certificate)> _SINK_
<java.security.cert.CertSelector: boolean match(java.security.cert.Certificate)> _SOURCE_
<java.security.cert.CertSelector: java.lang.Object clone()> _SOURCE_
<java.security.cert.X509CRL: boolean equals(java.lang.Object)> _SINK_
<java.security.cert.X509CRL: boolean equals(java.lang.Object)> _SOURCE_
<java.security.cert.X509CRL: int hashCode()> _SOURCE_
<java.security.cert.X509CRL: byte[] getEncoded()> _SOURCE_
<java.security.cert.X509CRL: void verify(java.security.PublicKey)> _SINK_
<java.security.cert.X509CRL: void verify(java.security.PublicKey,java.lang.String)> _SINK_
<java.security.cert.X509CRL: int getVersion()> _SOURCE_
<java.security.cert.X509CRL: java.security.Principal getIssuerDN()> _SOURCE_
<java.security.cert.X509CRL: javax.security.auth.x500.X500Principal getIssuerX500Principal()> _SOURCE_
<java.security.cert.X509CRL: java.util.Date getThisUpdate()> _SOURCE_
<java.security.cert.X509CRL: java.util.Date getNextUpdate()> _SOURCE_
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)> _SINK_
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.math.BigInteger)> _SOURCE_
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)> _SINK_
<java.security.cert.X509CRL: java.security.cert.X509CRLEntry getRevokedCertificate(java.security.cert.X509Certificate)> _SOURCE_
<java.security.cert.X509CRL: java.util.Set<X509CRLEntry> getRevokedCertificates()> _SOURCE_
<java.security.cert.X509CRL: byte[] getTBSCertList()> _SOURCE_
<java.security.cert.X509CRL: byte[] getSignature()> _SOURCE_
<java.security.cert.X509CRL: java.lang.String getSigAlgName()> _SOURCE_
<java.security.cert.X509CRL: java.lang.String getSigAlgOID()> _SOURCE_
<java.security.cert.X509CRL: byte[] getSigAlgParams()> _SOURCE_
<java.security.cert.CertStoreSpi: CertStoreSpi(java.security.cert.CertStoreParameters)> _SINK_
<java.security.cert.CertStoreSpi: java.util.Collection<Certificate> engineGetCertificates(java.security.cert.CertSelector)> _SINK_
<java.security.cert.CertStoreSpi: java.util.Collection<Certificate> engineGetCertificates(java.security.cert.CertSelector)> _SOURCE_
<java.security.cert.CertStoreSpi: java.util.Collection<CRL> engineGetCRLs(java.security.cert.CRLSelector)> _SINK_
<java.security.cert.CertStoreSpi: java.util.Collection<CRL> engineGetCRLs(java.security.cert.CRLSelector)> _SOURCE_
<java.security.cert.CRLSelector: boolean match(java.security.cert.CRL)> _SINK_
<java.security.cert.CRLSelector: boolean match(java.security.cert.CRL)> _SOURCE_
<java.security.cert.CRLSelector: java.lang.Object clone()> _SOURCE_
<java.security.cert.CertPathBuilderResult: java.security.cert.CertPath getCertPath()> _SOURCE_
<java.security.cert.CertPathBuilderResult: java.lang.Object clone()> _SOURCE_
<java.security.cert.CertPathValidatorResult: java.lang.Object clone()> _SOURCE_
<java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)> _SINK_
<java.security.cert.X509CRLEntry: boolean equals(java.lang.Object)> _SOURCE_
<java.security.cert.X509CRLEntry: int hashCode()> _SOURCE_
<java.security.cert.X509CRLEntry: byte[] getEncoded()> _SOURCE_
<java.security.cert.X509CRLEntry: java.math.BigInteger getSerialNumber()> _SOURCE_
<java.security.cert.X509CRLEntry: javax.security.auth.x500.X500Principal getCertificateIssuer()> _SOURCE_
<java.security.cert.X509CRLEntry: java.util.Date getRevocationDate()> _SOURCE_
<java.security.cert.X509CRLEntry: boolean hasExtensions()> _SOURCE_
<java.security.cert.X509CRLEntry: java.lang.String toString()> _SOURCE_
<java.security.cert.X509CRLEntry: java.security.cert.CRLReason getRevocationReason()> _SOURCE_
<java.security.cert.CertPathBuilder: CertPathBuilder(java.security.cert.CertPathBuilderSpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)> _SINK_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String)> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilder getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.Provider getProvider()> _SOURCE_
<java.security.cert.CertPathBuilder: java.lang.String getAlgorithm()> _SOURCE_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)> _SINK_
<java.security.cert.CertPathBuilder: java.security.cert.CertPathBuilderResult build(java.security.cert.CertPathParameters)> _SOURCE_
<java.security.cert.CertPathBuilder: java.lang.String getDefaultType()> _SOURCE_
<java.security.SecureClassLoader: SecureClassLoader(java.lang.ClassLoader)> _SINK_
<java.security.SecureClassLoader: java.lang.Class<?> defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)> _SINK_
<java.security.SecureClassLoader: java.lang.Class<?> defineClass(java.lang.String,byte[],int,int,java.security.CodeSource)> _SOURCE_
<java.security.SecureClassLoader: java.lang.Class<?> defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)> _SINK_
<java.security.SecureClassLoader: java.lang.Class<?> defineClass(java.lang.String,java.nio.ByteBuffer,java.security.CodeSource)> _SOURCE_
<java.security.SecureClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)> _SINK_
<java.security.SecureClassLoader: java.security.PermissionCollection getPermissions(java.security.CodeSource)> _SOURCE_
<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)> _SINK_
<java.security.SecureClassLoader: java.security.ProtectionDomain getProtectionDomain(java.security.CodeSource)> _SOURCE_
<java.security.PrivilegedExceptionAction: T run()> _SOURCE_
<java.security.UnrecoverableEntryException: UnrecoverableEntryException(java.lang.String)> _SINK_
<java.security.UnresolvedPermission: UnresolvedPermission(java.lang.String,java.lang.String,java.lang.String,java.security.cert.Certificate)> _SINK_
<java.security.UnresolvedPermission: java.security.acl.Permission resolve(java.security.acl.Permission,java.security.cert.Certificate)> _SINK_
<java.security.UnresolvedPermission: java.security.acl.Permission resolve(java.security.acl.Permission,java.security.cert.Certificate)> _SOURCE_
<java.security.UnresolvedPermission: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.UnresolvedPermission: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.UnresolvedPermission: boolean equals(java.lang.Object)> _SINK_
<java.security.UnresolvedPermission: boolean equals(java.lang.Object)> _SOURCE_
<java.security.UnresolvedPermission: int hashCode()> _SOURCE_
<java.security.UnresolvedPermission: java.lang.String getActions()> _SOURCE_
<java.security.UnresolvedPermission: java.lang.String getUnresolvedType()> _SOURCE_
<java.security.UnresolvedPermission: java.lang.String getUnresolvedName()> _SOURCE_
<java.security.UnresolvedPermission: java.lang.String getUnresolvedActions()> _SOURCE_
<java.security.UnresolvedPermission: java.security.cert.Certificate[] getUnresolvedCerts()> _SOURCE_
<java.security.UnresolvedPermission: java.lang.String toString()> _SOURCE_
<java.security.UnresolvedPermission: java.security.PermissionCollection newPermissionCollection()> _SOURCE_
<java.security.UnresolvedPermission: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.UnresolvedPermission: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.BasicPermission: void init(java.lang.String)> _SINK_
<java.security.BasicPermission: BasicPermission(java.lang.String)> _SINK_
<java.security.BasicPermission: BasicPermission(java.lang.String,java.lang.String)> _SINK_
<java.security.BasicPermission: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.BasicPermission: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.BasicPermission: boolean equals(java.lang.Object)> _SINK_
<java.security.BasicPermission: boolean equals(java.lang.Object)> _SOURCE_
<java.security.BasicPermission: int hashCode()> _SOURCE_
<java.security.BasicPermission: java.lang.String getActions()> _SOURCE_
<java.security.BasicPermission: java.security.PermissionCollection newPermissionCollection()> _SOURCE_
<java.security.BasicPermission: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.BasicPermission: java.lang.String getCanonicalName()> _SOURCE_
<java.security.BasicPermissionCollection: BasicPermissionCollection(java.lang.Class)> _SINK_
<java.security.BasicPermissionCollection: void add(java.security.acl.Permission)> _SINK_
<java.security.BasicPermissionCollection: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.BasicPermissionCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.BasicPermissionCollection: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.BasicPermissionCollection: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.BasicPermissionCollection: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.SignedObject: SignedObject(java.io.Serializable,java.security.PrivateKey,java.security.Signature)> _SINK_
<java.security.SignedObject: java.lang.Object getObject()> _SOURCE_
<java.security.SignedObject: byte[] getSignature()> _SOURCE_
<java.security.SignedObject: java.lang.String getAlgorithm()> _SOURCE_
<java.security.SignedObject: boolean verify(java.security.PublicKey,java.security.Signature)> _SINK_
<java.security.SignedObject: boolean verify(java.security.PublicKey,java.security.Signature)> _SOURCE_
<java.security.SignedObject: void sign(java.security.PrivateKey,java.security.Signature)> _SINK_
<java.security.SignedObject: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.DigestOutputStream: DigestOutputStream(java.io.OutputStream,java.security.MessageDigest)> _SINK_
<java.security.DigestOutputStream: java.security.MessageDigest getMessageDigest()> _SOURCE_
<java.security.DigestOutputStream: void setMessageDigest(java.security.MessageDigest)> _SINK_
<java.security.DigestOutputStream: void write(int)> _SINK_
<java.security.DigestOutputStream: void write(byte[],int,int)> _SINK_
<java.security.DigestOutputStream: void on(boolean)> _SINK_
<java.security.DigestOutputStream: java.lang.String toString()> _SOURCE_
<java.security.AlgorithmParameterGeneratorSpi: void engineInit(int,java.security.SecureRandom)> _SINK_
<java.security.AlgorithmParameterGeneratorSpi: void engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<java.security.AlgorithmParameterGeneratorSpi: java.security.AlgorithmParameters engineGenerateParameters()> _SOURCE_
<java.security.KeyRep: KeyRep(java.security.KeyRep.Type,java.lang.String,java.lang.String,byte[])> _SINK_
<java.security.KeyRep: java.lang.Object readResolve()> _SOURCE_
<java.security.KeyStoreException: KeyStoreException(java.lang.String)> _SINK_
<java.security.KeyStoreException: KeyStoreException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.KeyStoreException: KeyStoreException(java.lang.Throwable)> _SINK_
<java.security.LoadStoreParameter: java.security.KeyStore.ProtectionParameter getProtectionParameter()> _SOURCE_
<java.security.PasswordProtection: PasswordProtection(char[])> _SINK_
<java.security.PasswordProtection: char[] getPassword()> _SOURCE_
<java.security.PasswordProtection: boolean isDestroyed()> _SOURCE_
<java.security.CallbackHandlerProtection: CallbackHandlerProtection(javax.security.auth.callback.CallbackHandler)> _SINK_
<java.security.CallbackHandlerProtection: javax.security.auth.callback.CallbackHandler getCallbackHandler()> _SOURCE_
<java.security.PrivateKeyEntry: PrivateKeyEntry(java.security.PrivateKey,java.security.cert.Certificate[])> _SINK_
<java.security.PrivateKeyEntry: java.security.PrivateKey getPrivateKey()> _SOURCE_
<java.security.PrivateKeyEntry: java.security.cert.Certificate[] getCertificateChain()> _SOURCE_
<java.security.PrivateKeyEntry: java.security.cert.Certificate getCertificate()> _SOURCE_
<java.security.PrivateKeyEntry: java.lang.String toString()> _SOURCE_
<java.security.SecretKeyEntry: SecretKeyEntry(javax.crypto.SecretKey)> _SINK_
<java.security.SecretKeyEntry: javax.crypto.SecretKey getSecretKey()> _SOURCE_
<java.security.SecretKeyEntry: java.lang.String toString()> _SOURCE_
<java.security.TrustedCertificateEntry: TrustedCertificateEntry(java.security.cert.Certificate)> _SINK_
<java.security.TrustedCertificateEntry: java.security.cert.Certificate getTrustedCertificate()> _SOURCE_
<java.security.TrustedCertificateEntry: java.lang.String toString()> _SOURCE_
<java.security.KeyStore: KeyStore(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)> _SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.KeyStore: java.lang.String getDefaultType()> _SOURCE_
<java.security.KeyStore: java.security.Provider getProvider()> _SOURCE_
<java.security.KeyStore: java.lang.String getType()> _SOURCE_
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])> _SINK_
<java.security.KeyStore: java.security.Key getKey(java.lang.String,char[])> _SOURCE_
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)> _SINK_
<java.security.KeyStore: java.security.cert.Certificate[] getCertificateChain(java.lang.String)> _SOURCE_
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)> _SINK_
<java.security.KeyStore: java.security.cert.Certificate getCertificate(java.lang.String)> _SOURCE_
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)> _SINK_
<java.security.KeyStore: java.util.Date getCreationDate(java.lang.String)> _SOURCE_
<java.security.KeyStore: void setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])> _SINK_
<java.security.KeyStore: void setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])> _SINK_
<java.security.KeyStore: void setCertificateEntry(java.lang.String,java.security.cert.Certificate)> _SINK_
<java.security.KeyStore: void deleteEntry(java.lang.String)> _SINK_
<java.security.KeyStore: java.util.Enumeration<String> aliases()> _SOURCE_
<java.security.KeyStore: boolean containsAlias(java.lang.String)> _SINK_
<java.security.KeyStore: boolean containsAlias(java.lang.String)> _SOURCE_
<java.security.KeyStore: int size()> _SOURCE_
<java.security.KeyStore: boolean isKeyEntry(java.lang.String)> _SINK_
<java.security.KeyStore: boolean isKeyEntry(java.lang.String)> _SOURCE_
<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)> _SINK_
<java.security.KeyStore: boolean isCertificateEntry(java.lang.String)> _SOURCE_
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> _SINK_
<java.security.KeyStore: java.lang.String getCertificateAlias(java.security.cert.Certificate)> _SOURCE_
<java.security.KeyStore: void store(java.io.OutputStream,char[])> _SINK_
<java.security.KeyStore: void store(java.security.KeyStoreLoadStoreParameter)> _SINK_
<java.security.KeyStore: void load(java.io.InputStream,char[])> _SINK_
<java.security.KeyStore: void load(java.security.KeyStoreLoadStoreParameter)> _SINK_
<java.security.KeyStore: java.util.Map.Entry getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.KeyStore: java.util.Map.Entry getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> _SOURCE_
<java.security.KeyStore: void setEntry(java.lang.String,java.util.Map.Entry,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.KeyStore: boolean entryInstanceOf(java.lang.String,java.lang.Class<KeyStore.Entry>)> _SINK_
<java.security.KeyStore: boolean entryInstanceOf(java.lang.String,java.lang.Class<KeyStore.Entry>)> _SOURCE_
<java.security.Builder: java.security.KeyStore getKeyStore()> _SOURCE_
<java.security.Builder: java.security.KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)> _SINK_
<java.security.Builder: java.security.KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)> _SOURCE_
<java.security.Builder: java.security.KeyStore.Builder newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.Builder: java.security.KeyStore.Builder newInstance(java.security.KeyStore,java.security.KeyStore.ProtectionParameter)> _SOURCE_
<java.security.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter)> _SOURCE_
<java.security.FileBuilder: FileBuilder(java.lang.String,java.security.Provider,java.io.File,java.security.KeyStore.ProtectionParameter,java.security.AccessControlContext)> _SINK_
<java.security.FileBuilder: java.security.KeyStore getKeyStore()> _SOURCE_
<java.security.FileBuilder: java.security.KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)> _SINK_
<java.security.FileBuilder: java.security.KeyStore.ProtectionParameter getProtectionParameter(java.lang.String)> _SOURCE_
<java.security.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.Builder: java.security.KeyStore.Builder newInstance(java.lang.String,java.security.Provider,java.security.KeyStore.ProtectionParameter)> _SOURCE_
<java.security.SimpleLoadStoreParameter: SimpleLoadStoreParameter(java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.SimpleLoadStoreParameter: java.security.KeyStore.ProtectionParameter getProtectionParameter()> _SOURCE_
<java.security.GuardedObject: GuardedObject(java.lang.Object,java.security.Guard)> _SINK_
<java.security.GuardedObject: java.lang.Object getObject()> _SOURCE_
<java.security.GuardedObject: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.UnrecoverableKeyException: UnrecoverableKeyException(java.lang.String)> _SINK_
<java.security.Principal: boolean equals(java.lang.Object)> _SINK_
<java.security.Principal: boolean equals(java.lang.Object)> _SOURCE_
<java.security.Principal: java.lang.String toString()> _SOURCE_
<java.security.Principal: int hashCode()> _SOURCE_
<java.security.Principal: java.lang.String getName()> _SOURCE_
<java.security.MessageDigest: MessageDigest(java.lang.String)> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)> _SOURCE_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.MessageDigest: java.security.Provider getProvider()> _SOURCE_
<java.security.MessageDigest: void update(byte)> _SINK_
<java.security.MessageDigest: void update(byte[],int,int)> _SINK_
<java.security.MessageDigest: void update(byte[])> _SINK_
<java.security.MessageDigest: void update(java.nio.ByteBuffer)> _SINK_
<java.security.MessageDigest: byte[] digest()> _SOURCE_
<java.security.MessageDigest: int digest(byte[],int,int)> _SINK_
<java.security.MessageDigest: int digest(byte[],int,int)> _SOURCE_
<java.security.MessageDigest: byte[] digest(byte[])> _SINK_
<java.security.MessageDigest: byte[] digest(byte[])> _SOURCE_
<java.security.MessageDigest: java.lang.String toString()> _SOURCE_
<java.security.MessageDigest: boolean isEqual(byte[],byte[])> _SINK_
<java.security.MessageDigest: boolean isEqual(byte[],byte[])> _SOURCE_
<java.security.MessageDigest: java.lang.String getAlgorithm()> _SOURCE_
<java.security.MessageDigest: int getDigestLength()> _SOURCE_
<java.security.MessageDigest: java.lang.Object clone()> _SOURCE_
<java.security.Delegate: Delegate(java.security.MessageDigestSpi,java.lang.String)> _SINK_
<java.security.Delegate: java.lang.Object clone()> _SOURCE_
<java.security.Delegate: int engineGetDigestLength()> _SOURCE_
<java.security.Delegate: void engineUpdate(byte)> _SINK_
<java.security.Delegate: void engineUpdate(byte[],int,int)> _SINK_
<java.security.Delegate: void engineUpdate(java.nio.ByteBuffer)> _SINK_
<java.security.Delegate: byte[] engineDigest()> _SOURCE_
<java.security.Delegate: int engineDigest(byte[],int,int)> _SINK_
<java.security.Delegate: int engineDigest(byte[],int,int)> _SOURCE_
<java.security.KeyPairGenerator: KeyPairGenerator(java.lang.String)> _SINK_
<java.security.KeyPairGenerator: java.lang.String getAlgorithm()> _SOURCE_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance.Instance,java.lang.String)> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(sun.security.jca.GetInstance.Instance,java.lang.String)> _SOURCE_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String)> _SOURCE_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPairGenerator getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.KeyPairGenerator: java.security.Provider getProvider()> _SOURCE_
<java.security.KeyPairGenerator: void initialize(int)> _SINK_
<java.security.KeyPairGenerator: void initialize(int,java.security.SecureRandom)> _SINK_
<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.KeyPairGenerator: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<java.security.KeyPairGenerator: java.security.KeyPair genKeyPair()> _SOURCE_
<java.security.KeyPairGenerator: java.security.KeyPair generateKeyPair()> _SOURCE_
<java.security.Delegate: Delegate(java.security.KeyPairGeneratorSpi,java.lang.String)> _SINK_
<java.security.Delegate: Delegate(sun.security.jca.GetInstance.Instance,java.util.Iterator<Service>,java.lang.String)> _SINK_
<java.security.Delegate: java.security.KeyPairGeneratorSpi nextSpi(java.security.KeyPairGeneratorSpi,boolean)> _SINK_
<java.security.Delegate: java.security.KeyPairGeneratorSpi nextSpi(java.security.KeyPairGeneratorSpi,boolean)> _SOURCE_
<java.security.Delegate: void initialize(int,java.security.SecureRandom)> _SINK_
<java.security.Delegate: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<java.security.Delegate: java.security.KeyPair generateKeyPair()> _SOURCE_
<java.security.CodeSource: CodeSource(java.net.URL,java.security.cert.Certificate)> _SINK_
<java.security.CodeSource: CodeSource(java.net.URL,java.security.CodeSigner[])> _SINK_
<java.security.CodeSource: int hashCode()> _SOURCE_
<java.security.CodeSource: boolean equals(java.lang.Object)> _SINK_
<java.security.CodeSource: boolean equals(java.lang.Object)> _SOURCE_
<java.security.CodeSource: java.net.URL getLocation()> _SOURCE_
<java.security.CodeSource: java.security.cert.Certificate[] getCertificates()> _SOURCE_
<java.security.CodeSource: java.security.CodeSigner[] getCodeSigners()> _SOURCE_
<java.security.CodeSource: boolean implies(java.security.CodeSource)> _SINK_
<java.security.CodeSource: boolean implies(java.security.CodeSource)> _SOURCE_
<java.security.CodeSource: boolean matchCerts(java.security.CodeSource,boolean)> _SINK_
<java.security.CodeSource: boolean matchCerts(java.security.CodeSource,boolean)> _SOURCE_
<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)> _SINK_
<java.security.CodeSource: boolean matchLocation(java.security.CodeSource)> _SOURCE_
<java.security.CodeSource: java.lang.String toString()> _SOURCE_
<java.security.CodeSource: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.CodeSource: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.CodeSource: java.security.CodeSigner[] convertCertArrayToSignerArray(java.security.cert.Certificate[])> _SINK_
<java.security.CodeSource: java.security.CodeSigner[] convertCertArrayToSignerArray(java.security.cert.Certificate[])> _SOURCE_
<java.security.AccessControlContext: sun.security.util.Debug getDebug()> _SOURCE_
<java.security.AccessControlContext: AccessControlContext(java.security.ProtectionDomain)> _SINK_
<java.security.AccessControlContext: AccessControlContext(java.security.AccessControlContext,java.security.DomainCombiner)> _SINK_
<java.security.AccessControlContext: AccessControlContext(java.security.ProtectionDomain,java.security.DomainCombiner)> _SINK_
<java.security.AccessControlContext: AccessControlContext(java.security.ProtectionDomain,boolean)> _SINK_
<java.security.AccessControlContext: AccessControlContext(java.security.ProtectionDomain[],java.security.AccessControlContext)> _SINK_
<java.security.AccessControlContext: java.security.ProtectionDomain[] getContext()> _SOURCE_
<java.security.AccessControlContext: boolean isPrivileged()> _SOURCE_
<java.security.AccessControlContext: java.security.DomainCombiner getAssignedCombiner()> _SOURCE_
<java.security.AccessControlContext: java.security.DomainCombiner getDomainCombiner()> _SOURCE_
<java.security.AccessControlContext: void checkPermission(java.security.acl.Permission)> _SINK_
<java.security.AccessControlContext: java.security.AccessControlContext optimize()> _SOURCE_
<java.security.AccessControlContext: java.security.AccessControlContext goCombiner(java.security.ProtectionDomain[],java.security.AccessControlContext)> _SINK_
<java.security.AccessControlContext: java.security.AccessControlContext goCombiner(java.security.ProtectionDomain[],java.security.AccessControlContext)> _SOURCE_
<java.security.AccessControlContext: boolean equals(java.lang.Object)> _SINK_
<java.security.AccessControlContext: boolean equals(java.lang.Object)> _SOURCE_
<java.security.AccessControlContext: boolean containsAllPDs(java.security.AccessControlContext)> _SINK_
<java.security.AccessControlContext: boolean containsAllPDs(java.security.AccessControlContext)> _SOURCE_
<java.security.AccessControlContext: int hashCode()> _SOURCE_
<java.security.PolicySpi: boolean engineImplies(java.security.ProtectionDomain,java.security.acl.Permission)> _SINK_
<java.security.PolicySpi: boolean engineImplies(java.security.ProtectionDomain,java.security.acl.Permission)> _SOURCE_
<java.security.PolicySpi: java.security.PermissionCollection engineGetPermissions(java.security.CodeSource)> _SINK_
<java.security.PolicySpi: java.security.PermissionCollection engineGetPermissions(java.security.CodeSource)> _SOURCE_
<java.security.PolicySpi: java.security.PermissionCollection engineGetPermissions(java.security.ProtectionDomain)> _SINK_
<java.security.PolicySpi: java.security.PermissionCollection engineGetPermissions(java.security.ProtectionDomain)> _SOURCE_
<java.security.Key: java.lang.String getAlgorithm()> _SOURCE_
<java.security.Key: java.lang.String getFormat()> _SOURCE_
<java.security.Key: byte[] getEncoded()> _SOURCE_
<java.security.CodeSigner: CodeSigner(java.security.cert.CertPath,java.security.Timestamp)> _SINK_
<java.security.CodeSigner: java.security.cert.CertPath getSignerCertPath()> _SOURCE_
<java.security.CodeSigner: java.security.Timestamp getTimestamp()> _SOURCE_
<java.security.CodeSigner: int hashCode()> _SOURCE_
<java.security.CodeSigner: boolean equals(java.lang.Object)> _SINK_
<java.security.CodeSigner: boolean equals(java.lang.Object)> _SOURCE_
<java.security.CodeSigner: java.lang.String toString()> _SOURCE_
<java.security.CodeSigner: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.PrivilegedAction: T run()> _SOURCE_
<java.security.SignatureException: SignatureException(java.lang.String)> _SINK_
<java.security.SignatureException: SignatureException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.SignatureException: SignatureException(java.lang.Throwable)> _SINK_
<java.security.AccessControlException: AccessControlException(java.lang.String)> _SINK_
<java.security.AccessControlException: AccessControlException(java.lang.String,java.security.acl.Permission)> _SINK_
<java.security.AccessControlException: java.security.acl.Permission getPermission()> _SOURCE_
<java.security.SecureRandom: SecureRandom(byte)> _SINK_
<java.security.SecureRandom: void getDefaultPRNG(boolean,byte[])> _SINK_
<java.security.SecureRandom: SecureRandom(java.security.SecureRandomSpi,java.security.Provider)> _SINK_
<java.security.SecureRandom: SecureRandom(java.security.SecureRandomSpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)> _SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.SecureRandom: java.security.SecureRandomSpi getSecureRandomSpi()> _SOURCE_
<java.security.SecureRandom: java.security.Provider getProvider()> _SOURCE_
<java.security.SecureRandom: java.lang.String getAlgorithm()> _SOURCE_
<java.security.SecureRandom: void setSeed(byte[])> _SINK_
<java.security.SecureRandom: void setSeed(long)> _SINK_
<java.security.SecureRandom: void nextBytes(byte[])> _SINK_
<java.security.SecureRandom: int next(int)> _SINK_
<java.security.SecureRandom: int next(int)> _SOURCE_
<java.security.SecureRandom: byte[] getSeed(int)> _SINK_
<java.security.SecureRandom: byte[] getSeed(int)> _SOURCE_
<java.security.SecureRandom: byte[] generateSeed(int)> _SINK_
<java.security.SecureRandom: byte[] generateSeed(int)> _SOURCE_
<java.security.SecureRandom: byte[] longToByteArray(long)> _SINK_
<java.security.SecureRandom: byte[] longToByteArray(long)> _SOURCE_
<java.security.SecureRandom: java.lang.String getPrngAlgorithm()> _SOURCE_
<java.security.spec.ECParameterSpec: ECParameterSpec(java.security.spec.EllipticCurve,java.security.spec.ECPoint,java.math.BigInteger,int)> _SINK_
<java.security.spec.ECParameterSpec: java.security.spec.EllipticCurve getCurve()> _SOURCE_
<java.security.spec.ECParameterSpec: java.security.spec.ECPoint getGenerator()> _SOURCE_
<java.security.spec.ECParameterSpec: java.math.BigInteger getOrder()> _SOURCE_
<java.security.spec.ECParameterSpec: int getCofactor()> _SOURCE_
<java.security.spec.ECGenParameterSpec: ECGenParameterSpec(java.lang.String)> _SINK_
<java.security.spec.ECGenParameterSpec: java.lang.String getName()> _SOURCE_
<java.security.spec.ECPoint: ECPoint(java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.ECPoint: java.math.BigInteger getAffineX()> _SOURCE_
<java.security.spec.ECPoint: java.math.BigInteger getAffineY()> _SOURCE_
<java.security.spec.ECPoint: boolean equals(java.lang.Object)> _SINK_
<java.security.spec.ECPoint: boolean equals(java.lang.Object)> _SOURCE_
<java.security.spec.ECPoint: int hashCode()> _SOURCE_
<java.security.spec.DSAParameterSpec: DSAParameterSpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.DSAParameterSpec: java.math.BigInteger getP()> _SOURCE_
<java.security.spec.DSAParameterSpec: java.math.BigInteger getQ()> _SOURCE_
<java.security.spec.DSAParameterSpec: java.math.BigInteger getG()> _SOURCE_
<java.security.spec.RSAPrivateKeySpec: RSAPrivateKeySpec(java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getModulus()> _SOURCE_
<java.security.spec.RSAPrivateKeySpec: java.math.BigInteger getPrivateExponent()> _SOURCE_
<java.security.spec.ECFieldF2m: ECFieldF2m(int)> _SINK_
<java.security.spec.ECFieldF2m: ECFieldF2m(int,java.math.BigInteger)> _SINK_
<java.security.spec.ECFieldF2m: ECFieldF2m(int,int[])> _SINK_
<java.security.spec.ECFieldF2m: int getFieldSize()> _SOURCE_
<java.security.spec.ECFieldF2m: int getM()> _SOURCE_
<java.security.spec.ECFieldF2m: java.math.BigInteger getReductionPolynomial()> _SOURCE_
<java.security.spec.ECFieldF2m: int[] getMidTermsOfReductionPolynomial()> _SOURCE_
<java.security.spec.ECFieldF2m: boolean equals(java.lang.Object)> _SINK_
<java.security.spec.ECFieldF2m: boolean equals(java.lang.Object)> _SOURCE_
<java.security.spec.ECFieldF2m: int hashCode()> _SOURCE_
<java.security.spec.RSAPublicKeySpec: RSAPublicKeySpec(java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getModulus()> _SOURCE_
<java.security.spec.RSAPublicKeySpec: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: RSAPrivateCrtKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeP()> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeQ()> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()> _SOURCE_
<java.security.spec.RSAPrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()> _SOURCE_
<java.security.spec.RSAOtherPrimeInfo: RSAOtherPrimeInfo(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getPrime()> _SOURCE_
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getExponent()> _SOURCE_
<java.security.spec.RSAOtherPrimeInfo: java.math.BigInteger getCrtCoefficient()> _SOURCE_
<java.security.spec.ECField: int getFieldSize()> _SOURCE_
<java.security.spec.EncodedKeySpec: EncodedKeySpec(byte[])> _SINK_
<java.security.spec.EncodedKeySpec: byte[] getEncoded()> _SOURCE_
<java.security.spec.EncodedKeySpec: java.lang.String getFormat()> _SOURCE_
<java.security.spec.ECPublicKeySpec: ECPublicKeySpec(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)> _SINK_
<java.security.spec.ECPublicKeySpec: java.security.spec.ECPoint getW()> _SOURCE_
<java.security.spec.ECPublicKeySpec: java.security.spec.ECParameterSpec getParams()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: RSAMultiPrimePrivateCrtKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.security.spec.RSAOtherPrimeInfo[])> _SINK_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeP()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeQ()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentP()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getPrimeExponentQ()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.math.BigInteger getCrtCoefficient()> _SOURCE_
<java.security.spec.RSAMultiPrimePrivateCrtKeySpec: java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()> _SOURCE_
<java.security.spec.DSAPublicKeySpec: DSAPublicKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getY()> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getP()> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getQ()> _SOURCE_
<java.security.spec.DSAPublicKeySpec: java.math.BigInteger getG()> _SOURCE_
<java.security.spec.EllipticCurve: void checkValidity(java.security.spec.ECField,java.math.BigInteger,java.lang.String)> _SINK_
<java.security.spec.EllipticCurve: EllipticCurve(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.EllipticCurve: EllipticCurve(java.security.spec.ECField,java.math.BigInteger,java.math.BigInteger,byte[])> _SINK_
<java.security.spec.EllipticCurve: java.security.spec.ECField getField()> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getA()> _SOURCE_
<java.security.spec.EllipticCurve: java.math.BigInteger getB()> _SOURCE_
<java.security.spec.EllipticCurve: byte[] getSeed()> _SOURCE_
<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)> _SINK_
<java.security.spec.EllipticCurve: boolean equals(java.lang.Object)> _SOURCE_
<java.security.spec.EllipticCurve: int hashCode()> _SOURCE_
<java.security.spec.PSSParameterSpec: PSSParameterSpec(java.lang.String,java.lang.String,java.security.spec.AlgorithmParameterSpec,int,int)> _SINK_
<java.security.spec.PSSParameterSpec: PSSParameterSpec(int)> _SINK_
<java.security.spec.PSSParameterSpec: java.lang.String getDigestAlgorithm()> _SOURCE_
<java.security.spec.PSSParameterSpec: java.lang.String getMGFAlgorithm()> _SOURCE_
<java.security.spec.PSSParameterSpec: java.security.spec.AlgorithmParameterSpec getMGFParameters()> _SOURCE_
<java.security.spec.PSSParameterSpec: int getSaltLength()> _SOURCE_
<java.security.spec.PSSParameterSpec: int getTrailerField()> _SOURCE_
<java.security.spec.InvalidKeySpecException: InvalidKeySpecException(java.lang.String)> _SINK_
<java.security.spec.InvalidKeySpecException: InvalidKeySpecException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.spec.InvalidKeySpecException: InvalidKeySpecException(java.lang.Throwable)> _SINK_
<java.security.spec.ECPrivateKeySpec: ECPrivateKeySpec(java.math.BigInteger,java.security.spec.ECParameterSpec)> _SINK_
<java.security.spec.ECPrivateKeySpec: java.math.BigInteger getS()> _SOURCE_
<java.security.spec.ECPrivateKeySpec: java.security.spec.ECParameterSpec getParams()> _SOURCE_
<java.security.spec.InvalidParameterSpecException: InvalidParameterSpecException(java.lang.String)> _SINK_
<java.security.spec.PKCS8EncodedKeySpec: PKCS8EncodedKeySpec(byte[])> _SINK_
<java.security.spec.PKCS8EncodedKeySpec: byte[] getEncoded()> _SOURCE_
<java.security.spec.PKCS8EncodedKeySpec: java.lang.String getFormat()> _SOURCE_
<java.security.spec.RSAKeyGenParameterSpec: RSAKeyGenParameterSpec(int,java.math.BigInteger)> _SINK_
<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()> _SOURCE_
<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.spec.ECFieldFp: ECFieldFp(java.math.BigInteger)> _SINK_
<java.security.spec.ECFieldFp: int getFieldSize()> _SOURCE_
<java.security.spec.ECFieldFp: java.math.BigInteger getP()> _SOURCE_
<java.security.spec.ECFieldFp: boolean equals(java.lang.Object)> _SINK_
<java.security.spec.ECFieldFp: boolean equals(java.lang.Object)> _SOURCE_
<java.security.spec.ECFieldFp: int hashCode()> _SOURCE_
<java.security.spec.MGF1ParameterSpec: MGF1ParameterSpec(java.lang.String)> _SINK_
<java.security.spec.MGF1ParameterSpec: java.lang.String getDigestAlgorithm()> _SOURCE_
<java.security.spec.X509EncodedKeySpec: X509EncodedKeySpec(byte[])> _SINK_
<java.security.spec.X509EncodedKeySpec: byte[] getEncoded()> _SOURCE_
<java.security.spec.X509EncodedKeySpec: java.lang.String getFormat()> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: DSAPrivateKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)> _SINK_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getX()> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getP()> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getQ()> _SOURCE_
<java.security.spec.DSAPrivateKeySpec: java.math.BigInteger getG()> _SOURCE_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction<T>)> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction<T>)> _SOURCE_
<java.security.AccessController: T doPrivilegedWithCombiner(java.security.PrivilegedAction<T>)> _SINK_
<java.security.AccessController: T doPrivilegedWithCombiner(java.security.PrivilegedAction<T>)> _SOURCE_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction<T>,java.security.AccessControlContext)> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedAction<T>,java.security.AccessControlContext)> _SOURCE_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction<T>)> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction<T>)> _SOURCE_
<java.security.AccessController: T doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T>)> _SINK_
<java.security.AccessController: T doPrivilegedWithCombiner(java.security.PrivilegedExceptionAction<T>)> _SOURCE_
<java.security.AccessController: java.security.AccessControlContext preserveCombiner(java.security.DomainCombiner)> _SINK_
<java.security.AccessController: java.security.AccessControlContext preserveCombiner(java.security.DomainCombiner)> _SOURCE_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)> _SINK_
<java.security.AccessController: T doPrivileged(java.security.PrivilegedExceptionAction<T>,java.security.AccessControlContext)> _SOURCE_
<java.security.AccessController: java.security.AccessControlContext getStackAccessControlContext()> _SOURCE_
<java.security.AccessController: java.security.AccessControlContext getInheritedAccessControlContext()> _SOURCE_
<java.security.AccessController: java.security.AccessControlContext getContext()> _SOURCE_
<java.security.AccessController: void checkPermission(java.security.acl.Permission)> _SINK_
<java.security.Identity: Identity(java.lang.String,java.security.IdentityScope)> _SINK_
<java.security.Identity: Identity(java.lang.String)> _SINK_
<java.security.Identity: java.lang.String getName()> _SOURCE_
<java.security.Identity: java.security.IdentityScope getScope()> _SOURCE_
<java.security.Identity: java.security.PublicKey getPublicKey()> _SOURCE_
<java.security.Identity: void setPublicKey(java.security.PublicKey)> _SINK_
<java.security.Identity: void setInfo(java.lang.String)> _SINK_
<java.security.Identity: java.lang.String getInfo()> _SOURCE_
<java.security.Identity: void addCertificate(java.security.cert.Certificate)> _SINK_
<java.security.Identity: boolean keyEquals(java.security.Key,java.security.Key)> _SINK_
<java.security.Identity: boolean keyEquals(java.security.Key,java.security.Key)> _SOURCE_
<java.security.Identity: void removeCertificate(java.security.cert.Certificate)> _SINK_
<java.security.Identity: java.security.cert.Certificate[] certificates()> _SOURCE_
<java.security.Identity: boolean equals(java.lang.Object)> _SINK_
<java.security.Identity: boolean equals(java.lang.Object)> _SOURCE_
<java.security.Identity: boolean identityEquals(java.security.Identity)> _SINK_
<java.security.Identity: boolean identityEquals(java.security.Identity)> _SOURCE_
<java.security.Identity: java.lang.String fullName()> _SOURCE_
<java.security.Identity: java.lang.String toString()> _SOURCE_
<java.security.Identity: java.lang.String toString(boolean)> _SINK_
<java.security.Identity: java.lang.String toString(boolean)> _SOURCE_
<java.security.Identity: java.lang.String printKeys()> _SOURCE_
<java.security.Identity: java.lang.String printCertificates()> _SOURCE_
<java.security.Identity: int hashCode()> _SOURCE_
<java.security.Identity: void check(java.lang.String)> _SINK_
<java.security.interfaces.ECPrivateKey: java.math.BigInteger getS()> _SOURCE_
<java.security.interfaces.ECPublicKey: java.security.spec.ECPoint getW()> _SOURCE_
<java.security.interfaces.DSAPrivateKey: java.math.BigInteger getX()> _SOURCE_
<java.security.interfaces.DSAPublicKey: java.math.BigInteger getY()> _SOURCE_
<java.security.interfaces.RSAKey: java.math.BigInteger getModulus()> _SOURCE_
<java.security.interfaces.DSAKey: java.security.interfaces.DSAParams getParams()> _SOURCE_
<java.security.interfaces.DSAParams: java.math.BigInteger getP()> _SOURCE_
<java.security.interfaces.DSAParams: java.math.BigInteger getQ()> _SOURCE_
<java.security.interfaces.DSAParams: java.math.BigInteger getG()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeP()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeQ()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeExponentP()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getPrimeExponentQ()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.math.BigInteger getCrtCoefficient()> _SOURCE_
<java.security.interfaces.RSAMultiPrimePrivateCrtKey: java.security.spec.RSAOtherPrimeInfo[] getOtherPrimeInfo()> _SOURCE_
<java.security.interfaces.RSAPrivateKey: java.math.BigInteger getPrivateExponent()> _SOURCE_
<java.security.interfaces.ECKey: java.security.spec.ECParameterSpec getParams()> _SOURCE_
<java.security.interfaces.DSAKeyPairGenerator: void initialize(java.security.interfaces.DSAParams,java.security.SecureRandom)> _SINK_
<java.security.interfaces.DSAKeyPairGenerator: void initialize(int,boolean,java.security.SecureRandom)> _SINK_
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeP()> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeQ()> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentP()> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getPrimeExponentQ()> _SOURCE_
<java.security.interfaces.RSAPrivateCrtKey: java.math.BigInteger getCrtCoefficient()> _SOURCE_
<java.security.interfaces.RSAPublicKey: java.math.BigInteger getPublicExponent()> _SOURCE_
<java.security.KeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])> _SINK_
<java.security.KeyStoreSpi: java.security.Key engineGetKey(java.lang.String,char[])> _SOURCE_
<java.security.KeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: java.security.cert.Certificate[] engineGetCertificateChain(java.lang.String)> _SOURCE_
<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: java.security.cert.Certificate engineGetCertificate(java.lang.String)> _SOURCE_
<java.security.KeyStoreSpi: java.util.Date engineGetCreationDate(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: java.util.Date engineGetCreationDate(java.lang.String)> _SOURCE_
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])> _SINK_
<java.security.KeyStoreSpi: void engineSetKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])> _SINK_
<java.security.KeyStoreSpi: void engineSetCertificateEntry(java.lang.String,java.security.cert.Certificate)> _SINK_
<java.security.KeyStoreSpi: void engineDeleteEntry(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: java.util.Enumeration<String> engineAliases()> _SOURCE_
<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: boolean engineContainsAlias(java.lang.String)> _SOURCE_
<java.security.KeyStoreSpi: int engineSize()> _SOURCE_
<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: boolean engineIsKeyEntry(java.lang.String)> _SOURCE_
<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)> _SINK_
<java.security.KeyStoreSpi: boolean engineIsCertificateEntry(java.lang.String)> _SOURCE_
<java.security.KeyStoreSpi: java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)> _SINK_
<java.security.KeyStoreSpi: java.lang.String engineGetCertificateAlias(java.security.cert.Certificate)> _SOURCE_
<java.security.KeyStoreSpi: void engineStore(java.io.OutputStream,char[])> _SINK_
<java.security.KeyStoreSpi: void engineStore(java.security.KeyStore.LoadStoreParameter)> _SINK_
<java.security.KeyStoreSpi: void engineLoad(java.io.InputStream,char[])> _SINK_
<java.security.KeyStoreSpi: void engineLoad(java.security.KeyStore.LoadStoreParameter)> _SINK_
<java.security.KeyStoreSpi: java.security.KeyStore.Entry engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.KeyStoreSpi: java.security.KeyStore.Entry engineGetEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)> _SOURCE_
<java.security.KeyStoreSpi: void engineSetEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)> _SINK_
<java.security.KeyStoreSpi: boolean engineEntryInstanceOf(java.lang.String,java.lang.Class<KeyStore.Entry>)> _SINK_
<java.security.KeyStoreSpi: boolean engineEntryInstanceOf(java.lang.String,java.lang.Class<KeyStore.Entry>)> _SOURCE_
<java.security.Permission: Permission(java.lang.String)> _SINK_
<java.security.Permission: void checkGuard(java.lang.Object)> _SINK_
<java.security.Permission: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.Permission: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.Permission: boolean equals(java.lang.Object)> _SINK_
<java.security.Permission: boolean equals(java.lang.Object)> _SOURCE_
<java.security.Permission: int hashCode()> _SOURCE_
<java.security.Permission: java.lang.String getName()> _SOURCE_
<java.security.Permission: java.lang.String getActions()> _SOURCE_
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()> _SOURCE_
<java.security.Permission: java.lang.String toString()> _SOURCE_
<java.security.SignatureSpi: void engineInitVerify(java.security.PublicKey)> _SINK_
<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey)> _SINK_
<java.security.SignatureSpi: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)> _SINK_
<java.security.SignatureSpi: void engineUpdate(byte)> _SINK_
<java.security.SignatureSpi: void engineUpdate(byte[],int,int)> _SINK_
<java.security.SignatureSpi: void engineUpdate(java.nio.ByteBuffer)> _SINK_
<java.security.SignatureSpi: byte[] engineSign()> _SOURCE_
<java.security.SignatureSpi: int engineSign(byte[],int,int)> _SINK_
<java.security.SignatureSpi: int engineSign(byte[],int,int)> _SOURCE_
<java.security.SignatureSpi: boolean engineVerify(byte[])> _SINK_
<java.security.SignatureSpi: boolean engineVerify(byte[])> _SOURCE_
<java.security.SignatureSpi: boolean engineVerify(byte[],int,int)> _SINK_
<java.security.SignatureSpi: boolean engineVerify(byte[],int,int)> _SOURCE_
<java.security.SignatureSpi: void engineSetParameter(java.lang.String,java.lang.Object)> _SINK_
<java.security.SignatureSpi: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.SignatureSpi: java.security.AlgorithmParameters engineGetParameters()> _SOURCE_
<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)> _SINK_
<java.security.SignatureSpi: java.lang.Object engineGetParameter(java.lang.String)> _SOURCE_
<java.security.SignatureSpi: java.lang.Object clone()> _SOURCE_
<java.security.Policy: boolean isSet()> _SOURCE_
<java.security.Policy: void checkPermission(java.lang.String)> _SINK_
<java.security.Policy: java.security.Policy getPolicy()> _SOURCE_
<java.security.Policy: java.security.Policy getPolicyNoCheck()> _SOURCE_
<java.security.Policy: void setPolicy(java.security.Policy)> _SINK_
<java.security.Policy: void initPolicy(java.security.Policy)> _SINK_
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters)> _SINK_
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters)> _SOURCE_
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters,java.lang.String)> _SINK_
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters,java.lang.String)> _SOURCE_
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters,java.security.Provider)> _SINK_
<java.security.Policy: java.security.Policy getInstance(java.lang.String,java.security.Policy.Parameters,java.security.Provider)> _SOURCE_
<java.security.Policy: java.security.Policy handleException(java.security.NoSuchAlgorithmException)> _SINK_
<java.security.Policy: java.security.Policy handleException(java.security.NoSuchAlgorithmException)> _SOURCE_
<java.security.Policy: java.security.Provider getProvider()> _SOURCE_
<java.security.Policy: java.lang.String getType()> _SOURCE_
<java.security.Policy: java.security.Policy.Parameters getParameters()> _SOURCE_
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)> _SINK_
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)> _SOURCE_
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)> _SINK_
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)> _SOURCE_
<java.security.Policy: void addStaticPerms(java.security.PermissionCollection,java.security.PermissionCollection)> _SINK_
<java.security.Policy: boolean implies(java.security.ProtectionDomain,java.security.acl.Permission)> _SINK_
<java.security.Policy: boolean implies(java.security.ProtectionDomain,java.security.acl.Permission)> _SOURCE_
<java.security.PolicyDelegate: PolicyDelegate(java.security.PolicySpi,java.security.Provider,java.lang.String,java.security.Policy.Parameters)> _SINK_
<java.security.PolicyDelegate: java.lang.String getType()> _SOURCE_
<java.security.PolicyDelegate: java.security.Policy.Parameters getParameters()> _SOURCE_
<java.security.PolicyDelegate: java.security.Provider getProvider()> _SOURCE_
<java.security.PolicyDelegate: java.security.PermissionCollection getPermissions(java.security.CodeSource)> _SINK_
<java.security.PolicyDelegate: java.security.PermissionCollection getPermissions(java.security.CodeSource)> _SOURCE_
<java.security.PolicyDelegate: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)> _SINK_
<java.security.PolicyDelegate: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)> _SOURCE_
<java.security.PolicyDelegate: boolean implies(java.security.ProtectionDomain,java.security.acl.Permission)> _SINK_
<java.security.PolicyDelegate: boolean implies(java.security.ProtectionDomain,java.security.acl.Permission)> _SOURCE_
<java.security.UnsupportedEmptyCollection: void add(java.security.acl.Permission)> _SINK_
<java.security.UnsupportedEmptyCollection: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.UnsupportedEmptyCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.UnsupportedEmptyCollection: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.KeyFactory: KeyFactory(java.security.KeyFactorySpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.KeyFactory: KeyFactory(java.lang.String)> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String)> _SOURCE_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.KeyFactory: java.security.KeyFactory getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.KeyFactory: java.security.Provider getProvider()> _SOURCE_
<java.security.KeyFactory: java.lang.String getAlgorithm()> _SOURCE_
<java.security.KeyFactory: java.security.KeyFactorySpi nextSpi(java.security.KeyFactorySpi)> _SINK_
<java.security.KeyFactory: java.security.KeyFactorySpi nextSpi(java.security.KeyFactorySpi)> _SOURCE_
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)> _SINK_
<java.security.KeyFactory: java.security.PublicKey generatePublic(java.security.spec.KeySpec)> _SOURCE_
<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)> _SINK_
<java.security.KeyFactory: java.security.PrivateKey generatePrivate(java.security.spec.KeySpec)> _SOURCE_
<java.security.KeyFactory: T getKeySpec(java.security.Key,java.lang.Class<T>)> _SINK_
<java.security.KeyFactory: T getKeySpec(java.security.Key,java.lang.Class<T>)> _SOURCE_
<java.security.KeyFactory: java.security.Key translateKey(java.security.Key)> _SINK_
<java.security.KeyFactory: java.security.Key translateKey(java.security.Key)> _SOURCE_
<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])> _SINK_
<java.security.DomainCombiner: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])> _SOURCE_
<java.security.IdentityScope: IdentityScope(java.lang.String)> _SINK_
<java.security.IdentityScope: IdentityScope(java.lang.String,java.security.IdentityScope)> _SINK_
<java.security.IdentityScope: java.security.IdentityScope getSystemScope()> _SOURCE_
<java.security.IdentityScope: void setSystemScope(java.security.IdentityScope)> _SINK_
<java.security.IdentityScope: int size()> _SOURCE_
<java.security.IdentityScope: java.security.Identity getIdentity(java.lang.String)> _SINK_
<java.security.IdentityScope: java.security.Identity getIdentity(java.lang.String)> _SOURCE_
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.Principal)> _SINK_
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.Principal)> _SOURCE_
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.PublicKey)> _SINK_
<java.security.IdentityScope: java.security.Identity getIdentity(java.security.PublicKey)> _SOURCE_
<java.security.IdentityScope: void addIdentity(java.security.Identity)> _SINK_
<java.security.IdentityScope: void removeIdentity(java.security.Identity)> _SINK_
<java.security.IdentityScope: java.util.Enumeration<Identity> identities()> _SOURCE_
<java.security.IdentityScope: java.lang.String toString()> _SOURCE_
<java.security.IdentityScope: void check(java.lang.String)> _SINK_
<java.security.DigestInputStream: DigestInputStream(java.io.InputStream,java.security.MessageDigest)> _SINK_
<java.security.DigestInputStream: java.security.MessageDigest getMessageDigest()> _SOURCE_
<java.security.DigestInputStream: void setMessageDigest(java.security.MessageDigest)> _SINK_
<java.security.DigestInputStream: int read()> _SOURCE_
<java.security.DigestInputStream: int read(byte[],int,int)> _SINK_
<java.security.DigestInputStream: int read(byte[],int,int)> _SOURCE_
<java.security.DigestInputStream: void on(boolean)> _SINK_
<java.security.DigestInputStream: java.lang.String toString()> _SOURCE_
<java.security.AlgorithmParameterGenerator: AlgorithmParameterGenerator(java.security.AlgorithmParameterGeneratorSpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.AlgorithmParameterGenerator: java.lang.String getAlgorithm()> _SOURCE_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)> _SINK_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String)> _SOURCE_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameterGenerator getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.AlgorithmParameterGenerator: java.security.Provider getProvider()> _SOURCE_
<java.security.AlgorithmParameterGenerator: void init(int)> _SINK_
<java.security.AlgorithmParameterGenerator: void init(int,java.security.SecureRandom)> _SINK_
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.AlgorithmParameterGenerator: void init(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<java.security.AlgorithmParameterGenerator: java.security.AlgorithmParameters generateParameters()> _SOURCE_
<java.security.UnresolvedPermissionCollection: void add(java.security.acl.Permission)> _SINK_
<java.security.UnresolvedPermissionCollection: java.util.List<UnresolvedPermission> getUnresolvedPermissions(java.security.acl.Permission)> _SINK_
<java.security.UnresolvedPermissionCollection: java.util.List<UnresolvedPermission> getUnresolvedPermissions(java.security.acl.Permission)> _SOURCE_
<java.security.UnresolvedPermissionCollection: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.UnresolvedPermissionCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.UnresolvedPermissionCollection: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.UnresolvedPermissionCollection: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.UnresolvedPermissionCollection: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.AllPermission: AllPermission(java.lang.String,java.lang.String)> _SINK_
<java.security.AllPermission: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.AllPermission: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.AllPermission: boolean equals(java.lang.Object)> _SINK_
<java.security.AllPermission: boolean equals(java.lang.Object)> _SOURCE_
<java.security.AllPermission: int hashCode()> _SOURCE_
<java.security.AllPermission: java.lang.String getActions()> _SOURCE_
<java.security.AllPermission: java.security.PermissionCollection newPermissionCollection()> _SOURCE_
<java.security.AllPermissionCollection: void add(java.security.acl.Permission)> _SINK_
<java.security.AllPermissionCollection: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.AllPermissionCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.AllPermissionCollection: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.Guard: void checkGuard(java.lang.Object)> _SINK_
<java.security.AuthProvider: AuthProvider(java.lang.String,double,java.lang.String)> _SINK_
<java.security.AuthProvider: void login(javax.security.auth.Subject,javax.security.auth.callback.CallbackHandler)> _SINK_
<java.security.AuthProvider: void setCallbackHandler(javax.security.auth.callback.CallbackHandler)> _SINK_
<java.security.Permissions: void add(java.security.acl.Permission)> _SINK_
<java.security.Permissions: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.Permissions: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.Permissions: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.Permissions: java.security.PermissionCollection getPermissionCollection(java.security.acl.Permission,boolean)> _SINK_
<java.security.Permissions: java.security.PermissionCollection getPermissionCollection(java.security.acl.Permission,boolean)> _SOURCE_
<java.security.Permissions: java.security.PermissionCollection getUnresolvedPermissions(java.security.acl.Permission)> _SINK_
<java.security.Permissions: java.security.PermissionCollection getUnresolvedPermissions(java.security.acl.Permission)> _SOURCE_
<java.security.Permissions: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.Permissions: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.PermissionsEnumerator: PermissionsEnumerator(java.util.Iterator<PermissionCollection>)> _SINK_
<java.security.PermissionsEnumerator: boolean hasMoreElements()> _SOURCE_
<java.security.PermissionsEnumerator: java.security.acl.Permission nextElement()> _SOURCE_
<java.security.PermissionsEnumerator: java.util.Enumeration<Permission> getNextEnumWithMore()> _SOURCE_
<java.security.PermissionsHash: void add(java.security.acl.Permission)> _SINK_
<java.security.PermissionsHash: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.PermissionsHash: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.PermissionsHash: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.PermissionsHash: void writeObject(java.io.ObjectOutputStream)> _SINK_
<java.security.PermissionsHash: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.AlgorithmConstraints: boolean permits(java.util.Set<CryptoPrimitive>,java.lang.String,java.security.AlgorithmParameters)> _SINK_
<java.security.AlgorithmConstraints: boolean permits(java.util.Set<CryptoPrimitive>,java.lang.String,java.security.AlgorithmParameters)> _SOURCE_
<java.security.AlgorithmConstraints: boolean permits(java.util.Set<CryptoPrimitive>,java.security.Key)> _SINK_
<java.security.AlgorithmConstraints: boolean permits(java.util.Set<CryptoPrimitive>,java.security.Key)> _SOURCE_
<java.security.AlgorithmConstraints: boolean permits(java.util.Set<CryptoPrimitive>,java.lang.String,java.security.Key,java.security.AlgorithmParameters)> _SINK_
<java.security.AlgorithmConstraints: boolean permits(java.util.Set<CryptoPrimitive>,java.lang.String,java.security.Key,java.security.AlgorithmParameters)> _SOURCE_
<java.security.InvalidKeyException: InvalidKeyException(java.lang.String)> _SINK_
<java.security.InvalidKeyException: InvalidKeyException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.InvalidKeyException: InvalidKeyException(java.lang.Throwable)> _SINK_
<java.security.Provider: Provider(java.lang.String,double,java.lang.String)> _SINK_
<java.security.Provider: java.lang.String getName()> _SOURCE_
<java.security.Provider: double getVersion()> _SOURCE_
<java.security.Provider: java.lang.String getInfo()> _SOURCE_
<java.security.Provider: java.lang.String toString()> _SOURCE_
<java.security.Provider: void load(java.io.InputStream)> _SINK_
<java.security.Provider: void putAll(java.util.Map<?,?>)> _SINK_
<java.security.Provider: java.util.Set<Map.Entry<Object,Object>> entrySet()> _SOURCE_
<java.security.Provider: java.util.Set<Object> keySet()> _SOURCE_
<java.security.Provider: java.util.Collection<Object> values()> _SOURCE_
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)> _SINK_
<java.security.Provider: java.lang.Object put(java.lang.Object,java.lang.Object)> _SOURCE_
<java.security.Provider: java.lang.Object remove(java.lang.Object)> _SINK_
<java.security.Provider: java.lang.Object remove(java.lang.Object)> _SOURCE_
<java.security.Provider: java.lang.Object get(java.lang.Object)> _SINK_
<java.security.Provider: java.lang.Object get(java.lang.Object)> _SOURCE_
<java.security.Provider: java.util.Enumeration<Object> keys()> _SOURCE_
<java.security.Provider: java.util.Enumeration<Object> elements()> _SOURCE_
<java.security.Provider: java.lang.String getProperty(java.lang.String)> _SINK_
<java.security.Provider: java.lang.String getProperty(java.lang.String)> _SOURCE_
<java.security.Provider: void check(java.lang.String)> _SINK_
<java.security.Provider: void readObject(java.io.ObjectInputStream)> _SINK_
<java.security.Provider: void implPutAll(java.util.Map)> _SINK_
<java.security.Provider: java.lang.Object implRemove(java.lang.Object)> _SINK_
<java.security.Provider: java.lang.Object implRemove(java.lang.Object)> _SOURCE_
<java.security.Provider: java.lang.Object implPut(java.lang.Object,java.lang.Object)> _SINK_
<java.security.Provider: java.lang.Object implPut(java.lang.Object,java.lang.Object)> _SOURCE_
<java.security.ServiceKey: ServiceKey(java.lang.String,java.lang.String,boolean)> _SINK_
<java.security.ServiceKey: int hashCode()> _SOURCE_
<java.security.ServiceKey: boolean equals(java.lang.Object)> _SINK_
<java.security.ServiceKey: boolean equals(java.lang.Object)> _SOURCE_
<java.security.ServiceKey: boolean matches(java.lang.String,java.lang.String)> _SINK_
<java.security.ServiceKey: boolean matches(java.lang.String,java.lang.String)> _SOURCE_
<java.security.Provider: void removeInvalidServices(java.util.Map<ServiceKey,Service>)> _SINK_
<java.security.Provider: java.lang.String[] getTypeAndAlgorithm(java.lang.String)> _SINK_
<java.security.Provider: java.lang.String[] getTypeAndAlgorithm(java.lang.String)> _SOURCE_
<java.security.Provider: void parseLegacyPut(java.lang.String,java.lang.String)> _SINK_
<java.security.Provider: java.security.Provider.Service getService(java.lang.String,java.lang.String)> _SINK_
<java.security.Provider: java.security.Provider.Service getService(java.lang.String,java.lang.String)> _SOURCE_
<java.security.Provider: java.util.Set<Service> getServices()> _SOURCE_
<java.security.Provider: void putService(java.security.Provider.Service)> _SINK_
<java.security.Provider: void putPropertyStrings(java.security.Provider.Service)> _SINK_
<java.security.Provider: void removePropertyStrings(java.security.Provider.Service)> _SINK_
<java.security.Provider: void removeService(java.security.Provider.Service)> _SINK_
<java.security.Provider: void implRemoveService(java.security.Provider.Service)> _SINK_
<java.security.UString: UString(java.lang.String)> _SINK_
<java.security.UString: int hashCode()> _SOURCE_
<java.security.UString: boolean equals(java.lang.Object)> _SINK_
<java.security.UString: boolean equals(java.lang.Object)> _SOURCE_
<java.security.UString: java.lang.String toString()> _SOURCE_
<java.security.EngineDescription: EngineDescription(java.lang.String,boolean,java.lang.String)> _SINK_
<java.security.EngineDescription: java.lang.Class getConstructorParameterClass()> _SOURCE_
<java.security.Provider: void addEngine(java.lang.String,boolean,java.lang.String)> _SINK_
<java.security.Provider: java.lang.String getEngineName(java.lang.String)> _SINK_
<java.security.Provider: java.lang.String getEngineName(java.lang.String)> _SOURCE_
<java.security.Service: Service(java.security.Provider)> _SINK_
<java.security.Service: boolean isValid()> _SOURCE_
<java.security.Service: void addAlias(java.lang.String)> _SINK_
<java.security.Service: void addAttribute(java.lang.String,java.lang.String)> _SINK_
<java.security.Service: Service(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List<String>,java.util.Map<String,String>)> _SINK_
<java.security.Service: java.lang.String getType()> _SOURCE_
<java.security.Service: java.lang.String getAlgorithm()> _SOURCE_
<java.security.Service: java.security.Provider getProvider()> _SOURCE_
<java.security.Service: java.lang.String getClassName()> _SOURCE_
<java.security.Service: java.util.List<String> getAliases()> _SOURCE_
<java.security.Service: java.lang.String getAttribute(java.lang.String)> _SINK_
<java.security.Service: java.lang.String getAttribute(java.lang.String)> _SOURCE_
<java.security.Service: java.lang.Object newInstance(java.lang.Object)> _SINK_
<java.security.Service: java.lang.Object newInstance(java.lang.Object)> _SOURCE_
<java.security.Service: java.lang.Class getImplClass()> _SOURCE_
<java.security.Service: java.lang.Object newInstanceGeneric(java.lang.Object)> _SINK_
<java.security.Service: java.lang.Object newInstanceGeneric(java.lang.Object)> _SOURCE_
<java.security.Service: boolean supportsParameter(java.lang.Object)> _SINK_
<java.security.Service: boolean supportsParameter(java.lang.Object)> _SOURCE_
<java.security.Service: boolean hasKeyAttributes()> _SOURCE_
<java.security.Service: java.lang.Class getKeyClass(java.lang.String)> _SINK_
<java.security.Service: java.lang.Class getKeyClass(java.lang.String)> _SOURCE_
<java.security.Service: boolean supportsKeyFormat(java.security.Key)> _SINK_
<java.security.Service: boolean supportsKeyFormat(java.security.Key)> _SOURCE_
<java.security.Service: boolean supportsKeyClass(java.security.Key)> _SINK_
<java.security.Service: boolean supportsKeyClass(java.security.Key)> _SOURCE_
<java.security.Service: java.lang.String toString()> _SOURCE_
<java.security.Signature: Signature(java.lang.String)> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String)> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String)> _SOURCE_
<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance.Instance,java.lang.String)> _SINK_
<java.security.Signature: java.security.Signature getInstance(sun.security.jca.GetInstance.Instance,java.lang.String)> _SOURCE_
<java.security.Signature: boolean isSpi(java.security.Provider.Service)> _SINK_
<java.security.Signature: boolean isSpi(java.security.Provider.Service)> _SOURCE_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.Signature: java.security.Signature getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)> _SINK_
<java.security.Signature: java.security.Signature getInstanceRSA(java.security.Provider)> _SOURCE_
<java.security.Signature: java.security.Provider getProvider()> _SOURCE_
<java.security.Signature: void initVerify(java.security.PublicKey)> _SINK_
<java.security.Signature: void initVerify(java.security.cert.Certificate)> _SINK_
<java.security.Signature: void initSign(java.security.PrivateKey)> _SINK_
<java.security.Signature: void initSign(java.security.PrivateKey,java.security.SecureRandom)> _SINK_
<java.security.Signature: byte[] sign()> _SOURCE_
<java.security.Signature: int sign(byte[],int,int)> _SINK_
<java.security.Signature: int sign(byte[],int,int)> _SOURCE_
<java.security.Signature: boolean verify(byte[])> _SINK_
<java.security.Signature: boolean verify(byte[])> _SOURCE_
<java.security.Signature: boolean verify(byte[],int,int)> _SINK_
<java.security.Signature: boolean verify(byte[],int,int)> _SOURCE_
<java.security.Signature: void update(byte)> _SINK_
<java.security.Signature: void update(byte[])> _SINK_
<java.security.Signature: void update(byte[],int,int)> _SINK_
<java.security.Signature: void update(java.nio.ByteBuffer)> _SINK_
<java.security.Signature: java.lang.String getAlgorithm()> _SOURCE_
<java.security.Signature: java.lang.String toString()> _SOURCE_
<java.security.Signature: void setParameter(java.lang.String,java.lang.Object)> _SINK_
<java.security.Signature: void setParameter(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.Signature: java.security.AlgorithmParameters getParameters()> _SOURCE_
<java.security.Signature: java.lang.Object getParameter(java.lang.String)> _SINK_
<java.security.Signature: java.lang.Object getParameter(java.lang.String)> _SOURCE_
<java.security.Signature: java.lang.Object clone()> _SOURCE_
<java.security.Delegate: Delegate(java.security.SignatureSpi,java.lang.String)> _SINK_
<java.security.Delegate: Delegate(java.security.Provider.Service,java.util.Iterator<Service>,java.lang.String)> _SINK_
<java.security.Delegate: java.lang.Object clone()> _SOURCE_
<java.security.Delegate: java.security.SignatureSpi newInstance(java.security.Provider.Service)> _SINK_
<java.security.Delegate: java.security.SignatureSpi newInstance(java.security.Provider.Service)> _SOURCE_
<java.security.Delegate: void chooseProvider(int,java.security.Key,java.security.SecureRandom)> _SINK_
<java.security.Delegate: void init(java.security.SignatureSpi,int,java.security.Key,java.security.SecureRandom)> _SINK_
<java.security.Delegate: void engineInitVerify(java.security.PublicKey)> _SINK_
<java.security.Delegate: void engineInitSign(java.security.PrivateKey)> _SINK_
<java.security.Delegate: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)> _SINK_
<java.security.Delegate: void engineUpdate(byte)> _SINK_
<java.security.Delegate: void engineUpdate(byte[],int,int)> _SINK_
<java.security.Delegate: void engineUpdate(java.nio.ByteBuffer)> _SINK_
<java.security.Delegate: byte[] engineSign()> _SOURCE_
<java.security.Delegate: int engineSign(byte[],int,int)> _SINK_
<java.security.Delegate: int engineSign(byte[],int,int)> _SOURCE_
<java.security.Delegate: boolean engineVerify(byte[])> _SINK_
<java.security.Delegate: boolean engineVerify(byte[])> _SOURCE_
<java.security.Delegate: boolean engineVerify(byte[],int,int)> _SINK_
<java.security.Delegate: boolean engineVerify(byte[],int,int)> _SOURCE_
<java.security.Delegate: void engineSetParameter(java.lang.String,java.lang.Object)> _SINK_
<java.security.Delegate: void engineSetParameter(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.Delegate: java.lang.Object engineGetParameter(java.lang.String)> _SINK_
<java.security.Delegate: java.lang.Object engineGetParameter(java.lang.String)> _SOURCE_
<java.security.Delegate: java.security.AlgorithmParameters engineGetParameters()> _SOURCE_
<java.security.CipherAdapter: CipherAdapter(javax.crypto.Cipher)> _SINK_
<java.security.CipherAdapter: void engineInitVerify(java.security.PublicKey)> _SINK_
<java.security.CipherAdapter: void engineInitSign(java.security.PrivateKey)> _SINK_
<java.security.CipherAdapter: void engineInitSign(java.security.PrivateKey,java.security.SecureRandom)> _SINK_
<java.security.CipherAdapter: void engineUpdate(byte)> _SINK_
<java.security.CipherAdapter: void engineUpdate(byte[],int,int)> _SINK_
<java.security.CipherAdapter: byte[] engineSign()> _SOURCE_
<java.security.CipherAdapter: boolean engineVerify(byte[])> _SINK_
<java.security.CipherAdapter: boolean engineVerify(byte[])> _SOURCE_
<java.security.CipherAdapter: void engineSetParameter(java.lang.String,java.lang.Object)> _SINK_
<java.security.CipherAdapter: java.lang.Object engineGetParameter(java.lang.String)> _SINK_
<java.security.CipherAdapter: java.lang.Object engineGetParameter(java.lang.String)> _SOURCE_
<java.security.MessageDigestSpi: int engineGetDigestLength()> _SOURCE_
<java.security.MessageDigestSpi: void engineUpdate(byte)> _SINK_
<java.security.MessageDigestSpi: void engineUpdate(byte[],int,int)> _SINK_
<java.security.MessageDigestSpi: void engineUpdate(java.nio.ByteBuffer)> _SINK_
<java.security.MessageDigestSpi: byte[] engineDigest()> _SOURCE_
<java.security.MessageDigestSpi: int engineDigest(byte[],int,int)> _SINK_
<java.security.MessageDigestSpi: int engineDigest(byte[],int,int)> _SOURCE_
<java.security.MessageDigestSpi: java.lang.Object clone()> _SOURCE_
<java.security.KeyPair: KeyPair(java.security.PublicKey,java.security.PrivateKey)> _SINK_
<java.security.KeyPair: java.security.PublicKey getPublic()> _SOURCE_
<java.security.KeyPair: java.security.PrivateKey getPrivate()> _SOURCE_
<java.security.PermissionCollection: void add(java.security.acl.Permission)> _SINK_
<java.security.PermissionCollection: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.PermissionCollection: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.PermissionCollection: java.util.Enumeration<Permission> elements()> _SOURCE_
<java.security.PermissionCollection: boolean isReadOnly()> _SOURCE_
<java.security.PermissionCollection: java.lang.String toString()> _SOURCE_
<java.security.GeneralSecurityException: GeneralSecurityException(java.lang.String)> _SINK_
<java.security.GeneralSecurityException: GeneralSecurityException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.GeneralSecurityException: GeneralSecurityException(java.lang.Throwable)> _SINK_
<java.security.SecurityPermission: SecurityPermission(java.lang.String)> _SINK_
<java.security.SecurityPermission: SecurityPermission(java.lang.String,java.lang.String)> _SINK_
<java.security.AlgorithmParameters: AlgorithmParameters(java.security.AlgorithmParametersSpi,java.security.Provider,java.lang.String)> _SINK_
<java.security.AlgorithmParameters: java.lang.String getAlgorithm()> _SOURCE_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)> _SINK_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String)> _SOURCE_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)> _SINK_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.lang.String)> _SOURCE_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)> _SINK_
<java.security.AlgorithmParameters: java.security.AlgorithmParameters getInstance(java.lang.String,java.security.Provider)> _SOURCE_
<java.security.AlgorithmParameters: java.security.Provider getProvider()> _SOURCE_
<java.security.AlgorithmParameters: void init(java.security.spec.AlgorithmParameterSpec)> _SINK_
<java.security.AlgorithmParameters: void init(byte[])> _SINK_
<java.security.AlgorithmParameters: void init(byte[],java.lang.String)> _SINK_
<java.security.AlgorithmParameters: T getParameterSpec(java.lang.Class<T>)> _SINK_
<java.security.AlgorithmParameters: T getParameterSpec(java.lang.Class<T>)> _SOURCE_
<java.security.AlgorithmParameters: byte[] getEncoded()> _SOURCE_
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)> _SINK_
<java.security.AlgorithmParameters: byte[] getEncoded(java.lang.String)> _SOURCE_
<java.security.AlgorithmParameters: java.lang.String toString()> _SOURCE_
<java.security.ProtectionDomain: ProtectionDomain(java.security.CodeSource,java.security.PermissionCollection)> _SINK_
<java.security.ProtectionDomain: ProtectionDomain(java.security.CodeSource,java.security.PermissionCollection,java.lang.ClassLoader,java.security.Principal[])> _SINK_
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()> _SOURCE_
<java.security.ProtectionDomain: java.lang.ClassLoader getClassLoader()> _SOURCE_
<java.security.ProtectionDomain: java.security.Principal[] getPrincipals()> _SOURCE_
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()> _SOURCE_
<java.security.ProtectionDomain: boolean implies(java.security.acl.Permission)> _SINK_
<java.security.ProtectionDomain: boolean implies(java.security.acl.Permission)> _SOURCE_
<java.security.ProtectionDomain: java.lang.String toString()> _SOURCE_
<java.security.ProtectionDomain: boolean seeAllp()> _SOURCE_
<java.security.ProtectionDomain: java.security.PermissionCollection mergePermissions()> _SOURCE_
<java.security.ProviderException: ProviderException(java.lang.String)> _SINK_
<java.security.ProviderException: ProviderException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.ProviderException: ProviderException(java.lang.Throwable)> _SINK_
<java.security.KeyPairGeneratorSpi: void initialize(int,java.security.SecureRandom)> _SINK_
<java.security.KeyPairGeneratorSpi: void initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)> _SINK_
<java.security.KeyPairGeneratorSpi: java.security.KeyPair generateKeyPair()> _SOURCE_
<java.security.SecureRandomSpi: void engineSetSeed(byte[])> _SINK_
<java.security.SecureRandomSpi: void engineNextBytes(byte[])> _SINK_
<java.security.SecureRandomSpi: byte[] engineGenerateSeed(int)> _SINK_
<java.security.SecureRandomSpi: byte[] engineGenerateSeed(int)> _SOURCE_
<java.security.acl.Owner: boolean addOwner(java.security.Principal,java.security.Principal)> _SINK_
<java.security.acl.Owner: boolean addOwner(java.security.Principal,java.security.Principal)> _SOURCE_
<java.security.acl.Owner: boolean deleteOwner(java.security.Principal,java.security.Principal)> _SINK_
<java.security.acl.Owner: boolean deleteOwner(java.security.Principal,java.security.Principal)> _SOURCE_
<java.security.acl.Owner: boolean isOwner(java.security.Principal)> _SINK_
<java.security.acl.Owner: boolean isOwner(java.security.Principal)> _SOURCE_
<java.security.acl.Group: boolean addMember(java.security.Principal)> _SINK_
<java.security.acl.Group: boolean addMember(java.security.Principal)> _SOURCE_
<java.security.acl.Group: boolean removeMember(java.security.Principal)> _SINK_
<java.security.acl.Group: boolean removeMember(java.security.Principal)> _SOURCE_
<java.security.acl.Group: boolean isMember(java.security.Principal)> _SINK_
<java.security.acl.Group: boolean isMember(java.security.Principal)> _SOURCE_
<java.security.acl.Group: java.util.Enumeration<Principal> members()> _SOURCE_
<java.security.acl.Permission: boolean equals(java.lang.Object)> _SINK_
<java.security.acl.Permission: boolean equals(java.lang.Object)> _SOURCE_
<java.security.acl.Permission: java.lang.String toString()> _SOURCE_
<java.security.acl.Acl: void setName(java.security.Principal,java.lang.String)> _SINK_
<java.security.acl.Acl: java.lang.String getName()> _SOURCE_
<java.security.acl.Acl: boolean addEntry(java.security.Principal,java.security.acl.AclEntry)> _SINK_
<java.security.acl.Acl: boolean addEntry(java.security.Principal,java.security.acl.AclEntry)> _SOURCE_
<java.security.acl.Acl: boolean removeEntry(java.security.Principal,java.security.acl.AclEntry)> _SINK_
<java.security.acl.Acl: boolean removeEntry(java.security.Principal,java.security.acl.AclEntry)> _SOURCE_
<java.security.acl.Acl: java.util.Enumeration<Permission> getPermissions(java.security.Principal)> _SINK_
<java.security.acl.Acl: java.util.Enumeration<Permission> getPermissions(java.security.Principal)> _SOURCE_
<java.security.acl.Acl: java.util.Enumeration<AclEntry> entries()> _SOURCE_
<java.security.acl.Acl: boolean checkPermission(java.security.Principal,java.security.acl.Permission)> _SINK_
<java.security.acl.Acl: boolean checkPermission(java.security.Principal,java.security.acl.Permission)> _SOURCE_
<java.security.acl.Acl: java.lang.String toString()> _SOURCE_
<java.security.acl.AclEntry: boolean setPrincipal(java.security.Principal)> _SINK_
<java.security.acl.AclEntry: boolean setPrincipal(java.security.Principal)> _SOURCE_
<java.security.acl.AclEntry: java.security.Principal getPrincipal()> _SOURCE_
<java.security.acl.AclEntry: boolean isNegative()> _SOURCE_
<java.security.acl.AclEntry: boolean addPermission(java.security.acl.Permission)> _SINK_
<java.security.acl.AclEntry: boolean addPermission(java.security.acl.Permission)> _SOURCE_
<java.security.acl.AclEntry: boolean removePermission(java.security.acl.Permission)> _SINK_
<java.security.acl.AclEntry: boolean removePermission(java.security.acl.Permission)> _SOURCE_
<java.security.acl.AclEntry: boolean checkPermission(java.security.acl.Permission)> _SINK_
<java.security.acl.AclEntry: boolean checkPermission(java.security.acl.Permission)> _SOURCE_
<java.security.acl.AclEntry: java.util.Enumeration<Permission> permissions()> _SOURCE_
<java.security.acl.AclEntry: java.lang.String toString()> _SOURCE_
<java.security.acl.AclEntry: java.lang.Object clone()> _SOURCE_
<java.security.NoSuchAlgorithmException: NoSuchAlgorithmException(java.lang.String)> _SINK_
<java.security.NoSuchAlgorithmException: NoSuchAlgorithmException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.NoSuchAlgorithmException: NoSuchAlgorithmException(java.lang.Throwable)> _SINK_
<java.security.KeyManagementException: KeyManagementException(java.lang.String)> _SINK_
<java.security.KeyManagementException: KeyManagementException(java.lang.String,java.lang.Throwable)> _SINK_
<java.security.KeyManagementException: KeyManagementException(java.lang.Throwable)> _SINK_
<org.bouncycastle.asn1.DERUnknownTag: DERUnknownTag(int,byte[])> _SINK_
<org.bouncycastle.asn1.DERUnknownTag: int getTag()> _SOURCE_
<org.bouncycastle.asn1.DERUnknownTag: byte[] getData()> _SOURCE_
<org.bouncycastle.asn1.DERUnknownTag: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERUnknownTag: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUnknownTag: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERInteger: org.bouncycastle.asn1.DERInteger getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERInteger: DERInteger(int)> _SINK_
<org.bouncycastle.asn1.DERInteger: DERInteger(java.math.BigInteger)> _SINK_
<org.bouncycastle.asn1.DERInteger: DERInteger(byte[])> _SINK_
<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getValue()> _SOURCE_
<org.bouncycastle.asn1.DERInteger: java.math.BigInteger getPositiveValue()> _SOURCE_
<org.bouncycastle.asn1.DERInteger: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERInteger: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERInteger: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.x509.AlgorithmIdentifier getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: AlgorithmIdentifier(org.bouncycastle.asn1.DERObjectIdentifier)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: AlgorithmIdentifier(java.lang.String)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: AlgorithmIdentifier(org.bouncycastle.asn1.DERObjectIdentifier,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: AlgorithmIdentifier(org.bouncycastle.asn1.ASN1Sequence)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getObjectId()> _SOURCE_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DEREncodable getParameters()> _SOURCE_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: org.bouncycastle.asn1.DERObject getDERObject()> _SOURCE_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.x509.AlgorithmIdentifier: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERString: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERT61String: org.bouncycastle.asn1.DERT61String getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERT61String: org.bouncycastle.asn1.DERT61String getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERT61String: org.bouncycastle.asn1.DERT61String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERT61String: org.bouncycastle.asn1.DERT61String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERT61String: DERT61String(byte[])> _SINK_
<org.bouncycastle.asn1.DERT61String: DERT61String(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERT61String: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERT61String: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERT61String: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERT61String: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERInputStream: DERInputStream(java.io.InputStream)> _SINK_
<org.bouncycastle.asn1.DERInputStream: int readLength()> _SOURCE_
<org.bouncycastle.asn1.DERInputStream: void readFully(byte[])> _SINK_
<org.bouncycastle.asn1.DERInputStream: org.bouncycastle.asn1.DERObject buildObject(int,byte[])> _SINK_
<org.bouncycastle.asn1.DERInputStream: org.bouncycastle.asn1.DERObject buildObject(int,byte[])> _SOURCE_
<org.bouncycastle.asn1.DERInputStream: org.bouncycastle.asn1.DERObject readObject()> _SOURCE_
<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(boolean)> _SINK_
<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(boolean)> _SOURCE_
<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERBoolean: org.bouncycastle.asn1.DERBoolean getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERBoolean: DERBoolean(byte[])> _SINK_
<org.bouncycastle.asn1.DERBoolean: DERBoolean(boolean)> _SINK_
<org.bouncycastle.asn1.DERBoolean: boolean isTrue()> _SOURCE_
<org.bouncycastle.asn1.DERBoolean: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERBoolean: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBoolean: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DEREnumerated: org.bouncycastle.asn1.DEREnumerated getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DEREnumerated: org.bouncycastle.asn1.DEREnumerated getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DEREnumerated: org.bouncycastle.asn1.DEREnumerated getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DEREnumerated: org.bouncycastle.asn1.DEREnumerated getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DEREnumerated: DEREnumerated(int)> _SINK_
<org.bouncycastle.asn1.DEREnumerated: DEREnumerated(java.math.BigInteger)> _SINK_
<org.bouncycastle.asn1.DEREnumerated: DEREnumerated(byte[])> _SINK_
<org.bouncycastle.asn1.DEREnumerated: java.math.BigInteger getValue()> _SOURCE_
<org.bouncycastle.asn1.DEREnumerated: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DEREnumerated: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DEREnumerated: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERSequence: DERSequence(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERSequence: DERSequence(org.bouncycastle.asn1.DEREncodableVector)> _SINK_
<org.bouncycastle.asn1.DERSequence: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERObjectIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: org.bouncycastle.asn1.DERObjectIdentifier getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERObjectIdentifier: DERObjectIdentifier(byte[])> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: DERObjectIdentifier(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: java.lang.String getId()> _SOURCE_
<org.bouncycastle.asn1.DERObjectIdentifier: void writeField(java.io.OutputStream,int)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERObjectIdentifier: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERUTCTime: org.bouncycastle.asn1.DERUTCTime getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUTCTime: org.bouncycastle.asn1.DERUTCTime getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERUTCTime: org.bouncycastle.asn1.DERUTCTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERUTCTime: org.bouncycastle.asn1.DERUTCTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERUTCTime: DERUTCTime(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERUTCTime: DERUTCTime(java.util.Date)> _SINK_
<org.bouncycastle.asn1.DERUTCTime: DERUTCTime(byte[])> _SINK_
<org.bouncycastle.asn1.DERUTCTime: java.lang.String getTime()> _SOURCE_
<org.bouncycastle.asn1.DERUTCTime: java.lang.String getAdjustedTime()> _SOURCE_
<org.bouncycastle.asn1.DERUTCTime: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.DERUTCTime: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERUTCTime: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUTCTime: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.BERTaggedObject: BERTaggedObject(int,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.BERTaggedObject: BERTaggedObject(boolean,int,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.BERTaggedObject: BERTaggedObject(int)> _SINK_
<org.bouncycastle.asn1.BERTaggedObject: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.ASN1OutputStream: ASN1OutputStream(java.io.OutputStream)> _SINK_
<org.bouncycastle.asn1.ASN1OutputStream: void writeObject(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERPrintableString: org.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERPrintableString: org.bouncycastle.asn1.DERPrintableString getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERPrintableString: org.bouncycastle.asn1.DERPrintableString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERPrintableString: org.bouncycastle.asn1.DERPrintableString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERPrintableString: DERPrintableString(byte[])> _SINK_
<org.bouncycastle.asn1.DERPrintableString: DERPrintableString(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERPrintableString: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERPrintableString: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.DERPrintableString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERPrintableString: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.DERPrintableString: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERPrintableString: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DEROctetString: DEROctetString(byte[])> _SINK_
<org.bouncycastle.asn1.DEROctetString: DEROctetString(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DEROctetString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERConstructedSet: DERConstructedSet(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERConstructedSet: DERConstructedSet(org.bouncycastle.asn1.DEREncodableVector)> _SINK_
<org.bouncycastle.asn1.DERConstructedSet: void addObject(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERConstructedSet: int getSize()> _SOURCE_
<org.bouncycastle.asn1.DERConstructedSet: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERVisibleString: org.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERVisibleString: org.bouncycastle.asn1.DERVisibleString getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERVisibleString: org.bouncycastle.asn1.DERVisibleString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERVisibleString: org.bouncycastle.asn1.DERVisibleString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERVisibleString: DERVisibleString(byte[])> _SINK_
<org.bouncycastle.asn1.DERVisibleString: DERVisibleString(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERVisibleString: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERVisibleString: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.DERVisibleString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERVisibleString: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERVisibleString: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.BERSet: BERSet(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.BERSet: BERSet(org.bouncycastle.asn1.DEREncodableVector)> _SINK_
<org.bouncycastle.asn1.BERSet: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.ASN1Set getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.ASN1Set getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.ASN1Set getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: java.util.Enumeration getObjects()> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.DEREncodable getObjectAt(int)> _SINK_
<org.bouncycastle.asn1.ASN1Set: org.bouncycastle.asn1.DEREncodable getObjectAt(int)> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: int size()> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1Set: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1Set: void addObject(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.ASN1Set: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo(org.bouncycastle.asn1.DERConstructedSequence)> _SINK_
<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: EncryptedPrivateKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])> _SINK_
<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.x509.AlgorithmIdentifier getEncryptionAlgorithm()> _SOURCE_
<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: byte[] getEncryptedData()> _SOURCE_
<org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo: org.bouncycastle.asn1.DERObject getDERObject()> _SOURCE_
<org.bouncycastle.asn1.DERUniversalString: org.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUniversalString: org.bouncycastle.asn1.DERUniversalString getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERUniversalString: org.bouncycastle.asn1.DERUniversalString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERUniversalString: org.bouncycastle.asn1.DERUniversalString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERUniversalString: DERUniversalString(byte[])> _SINK_
<org.bouncycastle.asn1.DERUniversalString: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERUniversalString: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.DERUniversalString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERUniversalString: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUniversalString: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERGeneralizedTime: org.bouncycastle.asn1.DERGeneralizedTime getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: org.bouncycastle.asn1.DERGeneralizedTime getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERGeneralizedTime: org.bouncycastle.asn1.DERGeneralizedTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: org.bouncycastle.asn1.DERGeneralizedTime getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERGeneralizedTime: DERGeneralizedTime(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: DERGeneralizedTime(java.util.Date)> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: DERGeneralizedTime(byte[])> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: java.lang.String getTime()> _SOURCE_
<org.bouncycastle.asn1.DERGeneralizedTime: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.DERGeneralizedTime: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERGeneralizedTime: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DEREncodableVector: void add(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DEREncodableVector: org.bouncycastle.asn1.DEREncodable get(int)> _SINK_
<org.bouncycastle.asn1.DEREncodableVector: org.bouncycastle.asn1.DEREncodable get(int)> _SOURCE_
<org.bouncycastle.asn1.DEREncodableVector: int size()> _SOURCE_
<org.bouncycastle.asn1.BEROutputStream: BEROutputStream(java.io.OutputStream)> _SINK_
<org.bouncycastle.asn1.BEROutputStream: void writeObject(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBMPString: org.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBMPString: org.bouncycastle.asn1.DERBMPString getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERBMPString: org.bouncycastle.asn1.DERBMPString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERBMPString: org.bouncycastle.asn1.DERBMPString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERBMPString: DERBMPString(byte[])> _SINK_
<org.bouncycastle.asn1.DERBMPString: DERBMPString(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERBMPString: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERBMPString: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.DERBMPString: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBMPString: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERBMPString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERUTF8String: org.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUTF8String: org.bouncycastle.asn1.DERUTF8String getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERUTF8String: org.bouncycastle.asn1.DERUTF8String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERUTF8String: org.bouncycastle.asn1.DERUTF8String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERUTF8String: DERUTF8String(byte[])> _SINK_
<org.bouncycastle.asn1.DERUTF8String: DERUTF8String(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERUTF8String: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERUTF8String: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.DERUTF8String: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERUTF8String: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERUTF8String: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.ASN1Sequence getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: java.util.Enumeration getObjects()> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)> _SINK_
<org.bouncycastle.asn1.ASN1Sequence: org.bouncycastle.asn1.DEREncodable getObjectAt(int)> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: int size()> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1Sequence: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1Sequence: void addObject(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.ASN1Sequence: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERIA5String: org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERIA5String: org.bouncycastle.asn1.DERIA5String getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERIA5String: org.bouncycastle.asn1.DERIA5String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERIA5String: org.bouncycastle.asn1.DERIA5String getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERIA5String: DERIA5String(byte[])> _SINK_
<org.bouncycastle.asn1.DERIA5String: DERIA5String(java.lang.String)> _SINK_
<org.bouncycastle.asn1.DERIA5String: java.lang.String getString()> _SOURCE_
<org.bouncycastle.asn1.DERIA5String: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.DERIA5String: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERIA5String: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.DERIA5String: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERIA5String: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DEREncodable: org.bouncycastle.asn1.DERObject getDERObject()> _SOURCE_
<org.bouncycastle.asn1.ASN1TaggedObject: ASN1TaggedObject(int,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.ASN1TaggedObject: ASN1TaggedObject(boolean,int,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.ASN1TaggedObject: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1TaggedObject: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1TaggedObject: int getTagNo()> _SOURCE_
<org.bouncycastle.asn1.ASN1TaggedObject: boolean isExplicit()> _SOURCE_
<org.bouncycastle.asn1.ASN1TaggedObject: boolean isEmpty()> _SOURCE_
<org.bouncycastle.asn1.ASN1TaggedObject: org.bouncycastle.asn1.DERObject getObject()> _SOURCE_
<org.bouncycastle.asn1.ASN1TaggedObject: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.OIDTokenizer: OIDTokenizer(java.lang.String)> _SINK_
<org.bouncycastle.asn1.OIDTokenizer: boolean hasMoreTokens()> _SOURCE_
<org.bouncycastle.asn1.OIDTokenizer: java.lang.String nextToken()> _SOURCE_
<org.bouncycastle.asn1.DERBitString: int getPadBits(int)> _SINK_
<org.bouncycastle.asn1.DERBitString: int getPadBits(int)> _SOURCE_
<org.bouncycastle.asn1.DERBitString: byte[] getBytes(int)> _SINK_
<org.bouncycastle.asn1.DERBitString: byte[] getBytes(int)> _SOURCE_
<org.bouncycastle.asn1.DERBitString: org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBitString: org.bouncycastle.asn1.DERBitString getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERBitString: org.bouncycastle.asn1.DERBitString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.DERBitString: org.bouncycastle.asn1.DERBitString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.DERBitString: DERBitString(byte,int)> _SINK_
<org.bouncycastle.asn1.DERBitString: DERBitString(byte[],int)> _SINK_
<org.bouncycastle.asn1.DERBitString: DERBitString(byte[])> _SINK_
<org.bouncycastle.asn1.DERBitString: DERBitString(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERBitString: byte[] getBytes()> _SOURCE_
<org.bouncycastle.asn1.DERBitString: int getPadBits()> _SOURCE_
<org.bouncycastle.asn1.DERBitString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERBitString: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERBitString: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.DERObject: org.bouncycastle.asn1.DERObject getDERObject()> _SOURCE_
<org.bouncycastle.asn1.DERObject: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DEROutputStream: DEROutputStream(java.io.OutputStream)> _SINK_
<org.bouncycastle.asn1.DEROutputStream: void writeLength(int)> _SINK_
<org.bouncycastle.asn1.DEROutputStream: void writeEncoded(int,byte[])> _SINK_
<org.bouncycastle.asn1.DEROutputStream: void writeObject(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.DERConstructedSequence: void addObject(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERConstructedSequence: int getSize()> _SOURCE_
<org.bouncycastle.asn1.DERConstructedSequence: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERTaggedObject: DERTaggedObject(int,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERTaggedObject: DERTaggedObject(boolean,int,org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERTaggedObject: DERTaggedObject(int)> _SINK_
<org.bouncycastle.asn1.DERTaggedObject: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SINK_
<org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)> _SOURCE_
<org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1OctetString: org.bouncycastle.asn1.ASN1OctetString getInstance(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1OctetString: ASN1OctetString(byte[])> _SINK_
<org.bouncycastle.asn1.ASN1OctetString: ASN1OctetString(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.ASN1OctetString: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.ASN1OctetString: int hashCode()> _SOURCE_
<org.bouncycastle.asn1.ASN1OctetString: boolean equals(java.lang.Object)> _SINK_
<org.bouncycastle.asn1.ASN1OctetString: boolean equals(java.lang.Object)> _SOURCE_
<org.bouncycastle.asn1.ASN1OctetString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.DERSet: DERSet(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.DERSet: DERSet(org.bouncycastle.asn1.DEREncodableVector)> _SINK_
<org.bouncycastle.asn1.DERSet: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.BERInputStream: BERInputStream(java.io.InputStream)> _SINK_
<org.bouncycastle.asn1.BERInputStream: byte[] readIndefiniteLengthFully()> _SOURCE_
<org.bouncycastle.asn1.BERInputStream: org.bouncycastle.asn1.BERConstructedOctetString buildConstructedOctetString()> _SOURCE_
<org.bouncycastle.asn1.BERInputStream: org.bouncycastle.asn1.DERObject readObject()> _SOURCE_
<org.bouncycastle.asn1.BERConstructedSequence: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
<org.bouncycastle.asn1.BERConstructedOctetString: byte[] toBytes(java.util.Vector)> _SINK_
<org.bouncycastle.asn1.BERConstructedOctetString: byte[] toBytes(java.util.Vector)> _SOURCE_
<org.bouncycastle.asn1.BERConstructedOctetString: BERConstructedOctetString(byte[])> _SINK_
<org.bouncycastle.asn1.BERConstructedOctetString: BERConstructedOctetString(java.util.Vector)> _SINK_
<org.bouncycastle.asn1.BERConstructedOctetString: BERConstructedOctetString(org.bouncycastle.asn1.DERObject)> _SINK_
<org.bouncycastle.asn1.BERConstructedOctetString: BERConstructedOctetString(org.bouncycastle.asn1.DEREncodable)> _SINK_
<org.bouncycastle.asn1.BERConstructedOctetString: byte[] getOctets()> _SOURCE_
<org.bouncycastle.asn1.BERConstructedOctetString: java.util.Enumeration getObjects()> _SOURCE_
<org.bouncycastle.asn1.BERConstructedOctetString: java.util.Vector generateOcts()> _SOURCE_
<org.bouncycastle.asn1.BERConstructedOctetString: void encode(org.bouncycastle.asn1.DEROutputStream)> _SINK_
